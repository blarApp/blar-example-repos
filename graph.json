{
    "nodes": [
        {
            "id": "<function uuid4 at 0x7312f2adeb00>",
            "properties": {
                "path": "debugger_agent/",
                "name": "debugger_agent",
                "node_id": "<function uuid4 at 0x7312f2adeb00>",
                "label": "PACKAGE"
            }
        },
        {
            "id": "55425c7d-88e9-4a5d-9a67-42679ce48f0d",
            "properties": {
                "text": "from graph_construction.graph_builder import GraphConstructor\nfrom graph_construction.db_manager import JSONManager\n\ngraph_manager = JSONManager()\ngraph_constructor = GraphConstructor(graph_manager)\ngraph_constructor.build_graph(\"debugger_agent\", \"python\")",
                "node_id": "55425c7d-88e9-4a5d-9a67-42679ce48f0d",
                "function_calls": [
                    "JSONManager",
                    "GraphConstructor",
                    "GraphConstructor.build_graph"
                ],
                "name": "run",
                "path": "debugger_agent.run",
                "label": "FILE"
            }
        },
        {
            "id": "aabfed9b-6779-4280-b763-fd3d839c3893",
            "properties": {
                "path": "debugger_agent/__init__.py",
                "name": "__init__.py",
                "node_id": "aabfed9b-6779-4280-b763-fd3d839c3893",
                "label": "FILE"
            }
        },
        {
            "id": "<function uuid4 at 0x7312f2adeb00>",
            "properties": {
                "path": "debugger_agent/graph_construction/",
                "name": "graph_construction",
                "node_id": "<function uuid4 at 0x7312f2adeb00>",
                "label": "FOLDER"
            }
        },
        {
            "id": "6c3acc52-2108-4323-a07e-997759044987",
            "properties": {
                "text": "import json\nimport uuid\nfrom typing import List, Any\n\nclass JSONManager:\n    # Code replaced for brevity. See node_id fd03e95a-1d67-4139-b27e-775f009b3061",
                "node_id": "6c3acc52-2108-4323-a07e-997759044987",
                "function_calls": [],
                "name": "db_manager",
                "path": "debugger_agent.graph_construction.db_manager",
                "label": "FILE"
            }
        },
        {
            "id": "fd03e95a-1d67-4139-b27e-775f009b3061",
            "properties": {
                "name": "JSONManager",
                "signature": "class JSONManager:",
                "text": "class JSONManager:\n    def __init__(self, default_path: str = \"graph.json\"):\n        # Code replaced for brevity. See node_id f71da8f3-6698-4305-8889-85f41273a642\n\n    def save_graph(self, nodes: List[Any], edges: List[Any], path: str = None):\n        # Code replaced for brevity. See node_id a1a33463-d55c-4c89-a126-7867bac00f47\n\n    def format_node(self, node):\n        # Code replaced for brevity. See node_id ef5b971e-a8b5-46fa-b953-6b220f8910ea\n\n    def format_edge(self, edge):\n        # Code replaced for brevity. See node_id e910d0fc-2476-4e9b-a3c2-7a1120ee5568",
                "node_id": "fd03e95a-1d67-4139-b27e-775f009b3061",
                "file_node_id": "6c3acc52-2108-4323-a07e-997759044987",
                "path": "debugger_agent.graph_construction.db_manager.JSONManager",
                "label": "CLASS"
            }
        },
        {
            "id": "f71da8f3-6698-4305-8889-85f41273a642",
            "properties": {
                "name": "__init__",
                "signature": "def __init__(self, default_path: str = \"graph.json\"):",
                "text": "def __init__(self, default_path: str = \"graph.json\"):\n        self.default_path = default_path",
                "node_id": "f71da8f3-6698-4305-8889-85f41273a642",
                "function_calls": [],
                "file_node_id": "6c3acc52-2108-4323-a07e-997759044987",
                "path": "debugger_agent.graph_construction.db_manager.JSONManager.__init__",
                "label": "FUNCTION"
            }
        },
        {
            "id": "a1a33463-d55c-4c89-a126-7867bac00f47",
            "properties": {
                "name": "save_graph",
                "signature": "def save_graph(self, nodes: List[Any], edges: List[Any], path: str = None):",
                "text": "def save_graph(self, nodes: List[Any], edges: List[Any], path: str = None):\n        if path is None:\n            path = self.default_path\n        with open(path, \"w\") as f:\n            formatted_nodes = list(map(self.format_node, nodes))\n            formatted_edges = list(map(self.format_edge, edges))\n            json.dump({\"nodes\": formatted_nodes, \"edges\": formatted_edges}, f, indent=4)",
                "node_id": "a1a33463-d55c-4c89-a126-7867bac00f47",
                "function_calls": [
                    "open",
                    "list",
                    "map",
                    "list",
                    "map",
                    "json.dump"
                ],
                "file_node_id": "6c3acc52-2108-4323-a07e-997759044987",
                "path": "debugger_agent.graph_construction.db_manager.JSONManager.save_graph",
                "label": "FUNCTION"
            }
        },
        {
            "id": "ef5b971e-a8b5-46fa-b953-6b220f8910ea",
            "properties": {
                "name": "format_node",
                "signature": "def format_node(self, node):",
                "text": "def format_node(self, node):\n        formatted_node = {\n            \"id\": node[\"attributes\"][\"node_id\"],\n            \"properties\": {\n                **node[\"attributes\"],\n                \"label\": node[\"type\"]\n            }\n        }\n        return formatted_node",
                "node_id": "ef5b971e-a8b5-46fa-b953-6b220f8910ea",
                "function_calls": [],
                "file_node_id": "6c3acc52-2108-4323-a07e-997759044987",
                "path": "debugger_agent.graph_construction.db_manager.JSONManager.format_node",
                "label": "FUNCTION"
            }
        },
        {
            "id": "e910d0fc-2476-4e9b-a3c2-7a1120ee5568",
            "properties": {
                "name": "format_edge",
                "signature": "def format_edge(self, edge):",
                "text": "def format_edge(self, edge):\n        formatted_edge = {\n            \"id\": str(uuid.uuid4()),\n            \"start\": edge[\"sourceId\"],\n            \"end\": edge[\"targetId\"],\n            \"properties\": {\n                \"label\": edge[\"type\"]\n            }\n        }\n        return formatted_edge",
                "node_id": "e910d0fc-2476-4e9b-a3c2-7a1120ee5568",
                "function_calls": [
                    "str",
                    "uuid.uuid4"
                ],
                "file_node_id": "6c3acc52-2108-4323-a07e-997759044987",
                "path": "debugger_agent.graph_construction.db_manager.JSONManager.format_edge",
                "label": "FUNCTION"
            }
        },
        {
            "id": "77803f41-7f7e-4a01-a25a-4aef31bceaa4",
            "properties": {
                "text": "import os\nfrom pathlib import Path\nimport tree_sitter_languages\nfrom graph_construction.utils import format_nodes, tree_parser\nfrom llama_index.core import SimpleDirectoryReader\nfrom llama_index.core.schema import NodeRelationship, BaseNode\nfrom llama_index.core.text_splitter import CodeSplitter\nfrom llama_index.packs.code_hierarchy import CodeHierarchyNodeParser\n\n\nclass GraphFileParser:\n    # Code replaced for brevity. See node_id 49d5d073-8638-4f1b-a1ce-a612b2161bf2",
                "node_id": "77803f41-7f7e-4a01-a25a-4aef31bceaa4",
                "function_calls": [],
                "name": "graph_file_parser",
                "path": "debugger_agent.graph_construction.graph_file_parser",
                "label": "FILE"
            }
        },
        {
            "id": "49d5d073-8638-4f1b-a1ce-a612b2161bf2",
            "properties": {
                "name": "GraphFileParser",
                "signature": "class GraphFileParser:",
                "text": "class GraphFileParser:\n    RELATIONS_TYPES_MAP = {\n        \"function_definition\": \"FUNCTION_DEFINITION\",\n        \"class_definition\": \"CLASS_DEFINITION\",\n    }\n\n    def __init__(\n        self,\n        file_path: str,\n        root_path: str,\n        language: str,\n        directory_path: str,\n        visited_nodes: dict,\n        global_imports: dict,\n    ):\n        # Code replaced for brevity. See node_id da10527f-a6cf-4bd0-b31a-82368c79cd66\n\n    def parse(self):\n        # Code replaced for brevity. See node_id 55820510-96a7-43fe-be2c-39b6375ec28d\n\n    def __process_node__(\n        self, node: BaseNode, no_extension_path: str, file_node_id: str\n    ):\n        # Code replaced for brevity. See node_id e980da30-0464-46aa-91fb-4d2d161ab630\n\n    def _get_imports(self, path: str, file_node_id: str) -> dict:\n        # Code replaced for brevity. See node_id 1fefc75f-b3e4-41b6-979e-65755fd58d40",
                "node_id": "49d5d073-8638-4f1b-a1ce-a612b2161bf2",
                "file_node_id": "77803f41-7f7e-4a01-a25a-4aef31bceaa4",
                "path": "debugger_agent.graph_construction.graph_file_parser.GraphFileParser",
                "label": "CLASS"
            }
        },
        {
            "id": "da10527f-a6cf-4bd0-b31a-82368c79cd66",
            "properties": {
                "name": "__init__",
                "signature": "def __init__(\n        self,\n        file_path: str,\n        root_path: str,\n        language: str,\n        directory_path: str,\n        visited_nodes: dict,\n        global_imports: dict,\n    ):",
                "text": "def __init__(\n        self,\n        file_path: str,\n        root_path: str,\n        language: str,\n        directory_path: str,\n        visited_nodes: dict,\n        global_imports: dict,\n    ):\n        self.file_path = file_path\n        self.language = language\n        self.directory_path = directory_path\n        self.visited_nodes = visited_nodes\n        self.global_imports = global_imports\n        self.root_path = root_path",
                "node_id": "da10527f-a6cf-4bd0-b31a-82368c79cd66",
                "function_calls": [],
                "file_node_id": "77803f41-7f7e-4a01-a25a-4aef31bceaa4",
                "path": "debugger_agent.graph_construction.graph_file_parser.GraphFileParser.__init__",
                "label": "FUNCTION"
            }
        },
        {
            "id": "55820510-96a7-43fe-be2c-39b6375ec28d",
            "properties": {
                "name": "parse",
                "signature": "def parse(self):",
                "text": "def parse(self):\n        path = Path(self.file_path)\n        if not path.exists():\n            print(f\"File {self.file_path} does not exist.\")\n            return\n        documents = SimpleDirectoryReader(\n            input_files=[path],\n            file_metadata=lambda x: {\"filepath\": x},\n        ).load_data()\n\n        code = CodeHierarchyNodeParser(\n            language=self.language,\n            chunk_min_characters=3,\n            code_splitter=CodeSplitter(\n                language=self.language, max_chars=10000, chunk_lines=10\n            ),\n        )\n        no_extension_path = self.file_path.replace(\".py\", \"\")\n\n        split_nodes = code.get_nodes_from_documents(documents)\n        node_list = []\n        edges_list = []\n\n        file_node, file_relations = self.__process_node__(\n            split_nodes.pop(0), no_extension_path, \"\"\n        )\n        file_node[\"directory\"] = self.directory_path\n        file_node[\"name\"] = os.path.basename(self.file_path)\n        node_list.append(file_node)\n        edges_list.extend(file_relations)\n\n        for node in split_nodes:\n            processed_node, relationships = self.__process_node__(\n                node, no_extension_path, file_node[\"attributes\"][\"node_id\"]\n            )\n            node_list.append(processed_node)\n            edges_list.extend(relationships)\n\n        imports = self._get_imports(str(path), node_list[0][\"attributes\"][\"node_id\"])\n\n        return node_list, edges_list, imports",
                "node_id": "55820510-96a7-43fe-be2c-39b6375ec28d",
                "function_calls": [
                    "Path",
                    "Path.exists",
                    "print",
                    "SimpleDirectoryReader",
                    "SimpleDirectoryReader",
                    "CodeHierarchyNodeParser",
                    "CodeSplitter",
                    "GraphFileParser.file_path.replace",
                    "CodeHierarchyNodeParser.get_nodes_from_documents",
                    "GraphFileParser.__process_node__",
                    "code.get_nodes_from_documents.pop",
                    "os.path.basename",
                    "node_list.append",
                    "edges_list.extend",
                    "GraphFileParser.__process_node__",
                    "node_list.append",
                    "edges_list.extend",
                    "GraphFileParser._get_imports",
                    "str"
                ],
                "file_node_id": "77803f41-7f7e-4a01-a25a-4aef31bceaa4",
                "path": "debugger_agent.graph_construction.graph_file_parser.GraphFileParser.parse",
                "label": "FUNCTION"
            }
        },
        {
            "id": "e980da30-0464-46aa-91fb-4d2d161ab630",
            "properties": {
                "name": "__process_node__",
                "signature": "def __process_node__(\n        self, node: BaseNode, no_extension_path: str, file_node_id: str\n    ):",
                "text": "def __process_node__(\n        self, node: BaseNode, no_extension_path: str, file_node_id: str\n    ):\n        relationships = []\n        asignments_dict = {}\n        scope = (\n            node.metadata[\"inclusive_scopes\"][-1]\n            if node.metadata[\"inclusive_scopes\"]\n            else None\n        )\n        type_node = \"file\"\n        if scope:\n            type_node = scope[\"type\"]\n\n        if type_node == \"function_definition\":\n            function_calls = tree_parser.get_function_calls(node, asignments_dict)\n            processed_node = format_nodes.format_function_node(\n                node, scope, function_calls, file_node_id\n            )\n        elif type_node == \"class_definition\":\n            processed_node = format_nodes.format_class_node(node, scope, file_node_id)\n        else:\n            function_calls = tree_parser.get_function_calls(node, asignments_dict)\n            processed_node = format_nodes.format_file_node(\n                node, no_extension_path, function_calls\n            )\n\n        for relation in node.relationships.items():\n            if relation[0] == NodeRelationship.CHILD:\n                for child in relation[1]:\n                    relation_type = (\n                        child.metadata[\"inclusive_scopes\"][-1][\"type\"]\n                        if child.metadata[\"inclusive_scopes\"]\n                        else \"\"\n                    )\n                    relationships.append(\n                        {\n                            \"sourceId\": node.node_id,\n                            \"targetId\": child.node_id,\n                            \"type\": self.RELATIONS_TYPES_MAP.get(\n                                relation_type, \"UNKNOWN\"\n                            ),\n                        }\n                    )\n            elif relation[0] == NodeRelationship.PARENT:\n                if relation[1]:\n                    parent_path = self.visited_nodes.get(\n                        relation[1].node_id, no_extension_path\n                    ).replace(\"/\", \".\")\n                    node_path = f\"{parent_path}.{processed_node['attributes']['name']}\"\n                else:\n                    node_path = no_extension_path.replace(\"/\", \".\")\n        processed_node[\"attributes\"][\"path\"] = node_path\n        self.global_imports[node_path] = {\n            \"id\": processed_node[\"attributes\"][\"node_id\"],\n            \"type\": processed_node[\"type\"],\n        }\n        self.visited_nodes[node.node_id] = node_path\n        return processed_node, relationships",
                "node_id": "e980da30-0464-46aa-91fb-4d2d161ab630",
                "function_calls": [
                    "tree_parser.get_function_calls",
                    "format_nodes.format_function_node",
                    "format_nodes.format_class_node",
                    "tree_parser.get_function_calls",
                    "format_nodes.format_file_node",
                    "node.relationships.items",
                    "relationships.append",
                    "GraphFileParser.RELATIONS_TYPES_MAP.get",
                    "GraphFileParser.visited_nodes.get",
                    "GraphFileParser.visited_nodes.get",
                    "no_extension_path.replace"
                ],
                "file_node_id": "77803f41-7f7e-4a01-a25a-4aef31bceaa4",
                "path": "debugger_agent.graph_construction.graph_file_parser.GraphFileParser.__process_node__",
                "label": "FUNCTION"
            }
        },
        {
            "id": "1fefc75f-b3e4-41b6-979e-65755fd58d40",
            "properties": {
                "name": "_get_imports",
                "signature": "def _get_imports(self, path: str, file_node_id: str) -> dict:",
                "text": "def _get_imports(self, path: str, file_node_id: str) -> dict:\n        parser = tree_sitter_languages.get_parser(\"python\")\n        with open(path, \"r\") as file:\n            code = file.read()\n        tree = parser.parse(bytes(code, \"utf-8\"))\n\n        imports = {}\n        for node in tree.root_node.children:\n            if node.type == \"import_from_statement\":\n                import_statements = node.named_children\n\n                from_statement = import_statements[0]\n                from_text = from_statement.text.decode()\n                for import_statement in import_statements[1:]:\n                    imports[import_statement.text.decode()] = (\n                        tree_parser.resolve_import_path(from_text, path, self.root_path)\n                    )\n\n            elif node.type == \"import_statement\":\n                import_statement = node.named_children[0]\n                imports[\"global\"] = import_statement.text.decode()\n\n        return {file_node_id: imports}",
                "node_id": "1fefc75f-b3e4-41b6-979e-65755fd58d40",
                "function_calls": [
                    "tree_sitter_languages.get_parser",
                    "open",
                    "file.read",
                    "tree_sitter_languages.get_parser.parse",
                    "bytes",
                    "from_statement.text.decode",
                    "import_statement.text.decode",
                    "tree_parser.resolve_import_path",
                    "import_statement.text.decode"
                ],
                "file_node_id": "77803f41-7f7e-4a01-a25a-4aef31bceaa4",
                "path": "debugger_agent.graph_construction.graph_file_parser.GraphFileParser._get_imports",
                "label": "FUNCTION"
            }
        },
        {
            "id": "66152f32-5fbb-40df-a2b9-1a840bc69497",
            "properties": {
                "text": "import os\nimport uuid\nfrom graph_construction.graph_file_parser import GraphFileParser\nfrom graph_construction.utils import format_nodes\n\n\nclass GraphConstructor:\n    # Code replaced for brevity. See node_id aaff0033-1132-48f5-881f-941f15c4c9fc",
                "node_id": "66152f32-5fbb-40df-a2b9-1a840bc69497",
                "function_calls": [],
                "name": "graph_builder",
                "path": "debugger_agent.graph_construction.graph_builder",
                "label": "FILE"
            }
        },
        {
            "id": "aaff0033-1132-48f5-881f-941f15c4c9fc",
            "properties": {
                "name": "GraphConstructor",
                "signature": "class GraphConstructor:",
                "text": "class GraphConstructor:\n    def __init__(self, graph_manager):\n        # Code replaced for brevity. See node_id c035a716-8139-4331-b57c-d6222cd690d7\n\n    def _scan_directory(\n        self,\n        path,\n        language=\"python\",\n        nodes=[],\n        relationships=[],\n        imports={},\n        parent_id=None,\n    ):\n        # Code replaced for brevity. See node_id 7cb127e9-0694-4b2d-98e1-2fbedb7c8f15\n\n    def _relate_imports(self, imports: dict):\n        # Code replaced for brevity. See node_id 0ac33b5b-ca3b-4f61-87c2-02fd70f2e0e8\n\n    def _relate_function_calls(self, node_list, imports):\n        # Code replaced for brevity. See node_id 1ab9617b-479e-402c-831a-c74cc89f7770\n\n    def build_graph(self, path, language):\n        # process every node to create the graph structure\n        # Code replaced for brevity. See node_id 4f2c90ec-82de-4e82-9f26-ff730ebc7ab7",
                "node_id": "aaff0033-1132-48f5-881f-941f15c4c9fc",
                "file_node_id": "66152f32-5fbb-40df-a2b9-1a840bc69497",
                "path": "debugger_agent.graph_construction.graph_builder.GraphConstructor",
                "label": "CLASS"
            }
        },
        {
            "id": "c035a716-8139-4331-b57c-d6222cd690d7",
            "properties": {
                "name": "__init__",
                "signature": "def __init__(self, graph_manager):",
                "text": "def __init__(self, graph_manager):\n        self.graph_manager = graph_manager\n        self.directories_map = {}\n        self.visited_nodes = {}\n        self.global_imports = {}\n        self.root = None",
                "node_id": "c035a716-8139-4331-b57c-d6222cd690d7",
                "function_calls": [],
                "file_node_id": "66152f32-5fbb-40df-a2b9-1a840bc69497",
                "path": "debugger_agent.graph_construction.graph_builder.GraphConstructor.__init__",
                "label": "FUNCTION"
            }
        },
        {
            "id": "7cb127e9-0694-4b2d-98e1-2fbedb7c8f15",
            "properties": {
                "name": "_scan_directory",
                "signature": "def _scan_directory(\n        self,\n        path,\n        language=\"python\",\n        nodes=[],\n        relationships=[],\n        imports={},\n        parent_id=None,\n    ):",
                "text": "def _scan_directory(\n        self,\n        path,\n        language=\"python\",\n        nodes=[],\n        relationships=[],\n        imports={},\n        parent_id=None,\n    ):\n        if self.root is None:\n            self.root = path\n        package = False\n        init_py_path = os.path.join(path, \"__init__.py\")\n        if os.path.exists(init_py_path):\n            package = True\n\n        directory_node = format_nodes.format_directory_node(path, package)\n        directory_path = directory_node[\"attributes\"][\"path\"]\n        directory_node_id = directory_node[\"attributes\"][\"node_id\"]\n\n        if parent_id is not None:\n            relationships.append(\n                {\n                    \"sourceId\": parent_id,\n                    \"targetId\": directory_node_id,\n                    \"type\": \"CONTAINS\",\n                }\n            )\n\n        nodes.append(directory_node)\n        for entry in os.scandir(path):\n            if entry.is_file():\n                if entry.name.endswith(\".py\") and not entry.name == (\"__init__.py\"):\n                    file_parser = GraphFileParser(\n                        entry.path,\n                        self.root,\n                        language,\n                        directory_path,\n                        visited_nodes=self.visited_nodes,\n                        global_imports=self.global_imports,\n                    )\n\n                    entry_name = entry.name.split(\".py\")[0]\n                    processed_nodes, relations, file_imports = file_parser.parse()\n                    file_root_node_id = processed_nodes[0][\"attributes\"][\"node_id\"]\n\n                    nodes.extend(processed_nodes)\n                    relationships.extend(relations)\n                    relationships.append(\n                        {\n                            \"sourceId\": directory_node_id,\n                            \"targetId\": file_root_node_id,\n                            \"type\": \"CONTAINS\",\n                        }\n                    )\n                    imports.update(file_imports)\n\n                    global_import_key = (directory_path + entry_name).replace(\"/\", \".\")\n                    self.global_imports[global_import_key] = {\n                        \"id\": file_root_node_id,\n                        \"type\": \"FILE\",\n                    }\n                else:\n                    file_node = {\n                        \"type\": \"FILE\",\n                        \"attributes\": {\n                            \"path\": entry.path,\n                            \"name\": entry.name,\n                            \"node_id\": str(uuid.uuid4()),\n                        },\n                    }\n                    nodes.append(file_node)\n                    relationships.append(\n                        {\n                            \"sourceId\": directory_node_id,\n                            \"targetId\": file_node[\"attributes\"][\"node_id\"],\n                            \"type\": \"CONTAINS\",\n                        }\n                    )\n            if entry.is_dir():\n                if entry.name == \"__pycache__\":\n                    continue\n                nodes, relationships, imports = self._scan_directory(\n                    entry.path,\n                    language,\n                    nodes,\n                    relationships,\n                    imports,\n                    directory_node_id,\n                )\n        return nodes, relationships, imports",
                "node_id": "7cb127e9-0694-4b2d-98e1-2fbedb7c8f15",
                "function_calls": [
                    "os.path.join",
                    "os.path.exists",
                    "format_nodes.format_directory_node",
                    "relationships.append",
                    "nodes.append",
                    "os.scandir",
                    "entry.is_file",
                    "entry.name.endswith",
                    "GraphFileParser",
                    "entry.name.split",
                    "GraphFileParser.parse",
                    "nodes.extend",
                    "relationships.extend",
                    "relationships.append",
                    "imports.update",
                    "str",
                    "uuid.uuid4",
                    "nodes.append",
                    "relationships.append",
                    "entry.is_dir",
                    "GraphConstructor._scan_directory"
                ],
                "file_node_id": "66152f32-5fbb-40df-a2b9-1a840bc69497",
                "path": "debugger_agent.graph_construction.graph_builder.GraphConstructor._scan_directory",
                "label": "FUNCTION"
            }
        },
        {
            "id": "0ac33b5b-ca3b-4f61-87c2-02fd70f2e0e8",
            "properties": {
                "name": "_relate_imports",
                "signature": "def _relate_imports(self, imports: dict):",
                "text": "def _relate_imports(self, imports: dict):\n        import_edges = []\n        for file_node_id in imports.keys():\n            for imp in imports[file_node_id].keys():\n                for key in self.global_imports.keys():\n                    if key.endswith(imp):\n                        import_edges.append(\n                            {\n                                \"sourceId\": file_node_id,\n                                \"targetId\": self.global_imports[key][\"id\"],\n                                \"type\": \"IMPORTS\",\n                            }\n                        )\n\n        return import_edges",
                "node_id": "0ac33b5b-ca3b-4f61-87c2-02fd70f2e0e8",
                "function_calls": [
                    "imports.keys",
                    "GraphConstructor.global_imports.keys",
                    "key.endswith",
                    "import_edges.append"
                ],
                "file_node_id": "66152f32-5fbb-40df-a2b9-1a840bc69497",
                "path": "debugger_agent.graph_construction.graph_builder.GraphConstructor._relate_imports",
                "label": "FUNCTION"
            }
        },
        {
            "id": "1ab9617b-479e-402c-831a-c74cc89f7770",
            "properties": {
                "name": "_relate_function_calls",
                "signature": "def _relate_function_calls(self, node_list, imports):",
                "text": "def _relate_function_calls(self, node_list, imports):\n        function_calls_relations = []\n        for node in node_list:\n            function_calls = node[\"attributes\"].get(\"function_calls\")\n            if function_calls:\n                for function_call in function_calls:\n                    if node[\"type\"] == \"FILE\":\n                        file_imports = imports[node[\"attributes\"][\"node_id\"]]\n                    else:\n                        file_imports = imports[node[\"attributes\"][\"file_node_id\"]]\n\n                    function_import = file_imports.get(function_call.split(\".\")[0])\n                    root_directory = node[\"attributes\"][\"path\"].replace(\n                        \".\" + node[\"attributes\"][\"name\"], \"\"\n                    )\n                    directory = root_directory\n                    if function_import:\n                        directory = function_import\n\n                    for module in function_call.split(\".\"):\n                        final_module = \".\" + module\n                        intermediate_module = \".\" + module + \".\"\n                        if not (\n                            final_module in directory\n                            or intermediate_module in directory\n                        ):\n                            directory += f\".{module}\"\n                    if directory in self.global_imports:\n                        target_node_type = self.global_imports[directory][\"type\"]\n                        if target_node_type == \"FUNCTION\" or target_node_type == \"FILE\":\n                            function_calls_relations.append(\n                                {\n                                    \"sourceId\": node[\"attributes\"][\"node_id\"],\n                                    \"targetId\": self.global_imports[directory][\"id\"],\n                                    \"type\": \"CALLS\",\n                                }\n                            )\n                        elif target_node_type == \"CLASS\":\n                            function_calls_relations.append(\n                                {\n                                    \"sourceId\": node[\"attributes\"][\"node_id\"],\n                                    \"targetId\": self.global_imports[directory][\"id\"],\n                                    \"type\": \"INSTANTIATES\",\n                                }\n                            )\n\n                            init_directory = directory + \".__init__\"\n                            function_calls_relations.append(\n                                {\n                                    \"sourceId\": node[\"attributes\"][\"node_id\"],\n                                    \"targetId\": self.global_imports[init_directory][\n                                        \"id\"\n                                    ],\n                                    \"type\": \"CALLS\",\n                                }\n                            )\n\n        return function_calls_relations",
                "node_id": "1ab9617b-479e-402c-831a-c74cc89f7770",
                "function_calls": [
                    "file_imports.get",
                    "function_call.split",
                    "function_call.split",
                    "function_calls_relations.append",
                    "function_calls_relations.append",
                    "function_calls_relations.append"
                ],
                "file_node_id": "66152f32-5fbb-40df-a2b9-1a840bc69497",
                "path": "debugger_agent.graph_construction.graph_builder.GraphConstructor._relate_function_calls",
                "label": "FUNCTION"
            }
        },
        {
            "id": "4f2c90ec-82de-4e82-9f26-ff730ebc7ab7",
            "properties": {
                "name": "build_graph",
                "signature": "def build_graph(self, path, language):\n        # process every node to create the graph structure",
                "text": "def build_graph(self, path, language):\n        # process every node to create the graph structure\n        nodes, relationships, imports = self._scan_directory(path, language)\n        # relate imports between file nodes\n        relationships.extend(self._relate_imports(imports))\n        # relate functions calls\n        relationships.extend(self._relate_function_calls(nodes, imports))\n\n        self.graph_manager.save_graph(nodes,relationships)",
                "node_id": "4f2c90ec-82de-4e82-9f26-ff730ebc7ab7",
                "function_calls": [
                    "GraphConstructor._scan_directory",
                    "relationships.extend",
                    "GraphConstructor._relate_imports",
                    "relationships.extend",
                    "GraphConstructor._relate_function_calls",
                    "GraphConstructor.graph_manager.save_graph"
                ],
                "file_node_id": "66152f32-5fbb-40df-a2b9-1a840bc69497",
                "path": "debugger_agent.graph_construction.graph_builder.GraphConstructor.build_graph",
                "label": "FUNCTION"
            }
        },
        {
            "id": "<function uuid4 at 0x7312f2adeb00>",
            "properties": {
                "path": "debugger_agent/graph_construction/utils/",
                "name": "utils",
                "node_id": "<function uuid4 at 0x7312f2adeb00>",
                "label": "PACKAGE"
            }
        },
        {
            "id": "17a6d02a-532b-4d6b-97e8-40983de11ec1",
            "properties": {
                "text": "from llama_index.core.schema import BaseNode\nimport os\nimport uuid\n\n\ndef format_function_node(\n    node: BaseNode, scope: dict, function_calls: list[str], file_node_id: str\n) -> dict:\n    # Code replaced for brevity. See node_id f2340ab7-b027-44fd-b479-bb47d1f7a8a4\n\n\ndef format_class_node(node: BaseNode, scope: dict, file_node_id: str) -> dict:\n    # Code replaced for brevity. See node_id b397caa4-eed9-4cc3-ae91-84c8b988c36f\n\n\ndef format_file_node(\n    node: BaseNode, no_extension_path: str, function_calls: list[str]\n) -> dict:\n    # Code replaced for brevity. See node_id bf2c22b7-9802-479b-a0ea-a0b8fac1dc0c\n\n\ndef format_directory_node(path: str, package: bool) -> dict:\n    # Code replaced for brevity. See node_id f5327d03-61c4-4b8d-b846-c2f33e31cbb0",
                "node_id": "17a6d02a-532b-4d6b-97e8-40983de11ec1",
                "function_calls": [],
                "name": "format_nodes",
                "path": "debugger_agent.graph_construction.utils.format_nodes",
                "label": "FILE"
            }
        },
        {
            "id": "f2340ab7-b027-44fd-b479-bb47d1f7a8a4",
            "properties": {
                "name": "format_function_node",
                "signature": "def format_function_node(\n    node: BaseNode, scope: dict, function_calls: list[str], file_node_id: str\n) -> dict:",
                "text": "def format_function_node(\n    node: BaseNode, scope: dict, function_calls: list[str], file_node_id: str\n) -> dict:\n    name = scope[\"name\"]\n    signature = scope[\"signature\"]\n\n    processed_node = {\n        \"type\": \"FUNCTION\",\n        \"attributes\": {\n            \"name\": name,\n            \"signature\": signature,\n            \"text\": node.text,\n            \"node_id\": node.node_id,\n            \"function_calls\": function_calls,\n            \"file_node_id\": file_node_id,\n        },\n    }\n\n    return processed_node",
                "node_id": "f2340ab7-b027-44fd-b479-bb47d1f7a8a4",
                "function_calls": [],
                "file_node_id": "17a6d02a-532b-4d6b-97e8-40983de11ec1",
                "path": "debugger_agent.graph_construction.utils.format_nodes.format_function_node",
                "label": "FUNCTION"
            }
        },
        {
            "id": "b397caa4-eed9-4cc3-ae91-84c8b988c36f",
            "properties": {
                "name": "format_class_node",
                "signature": "def format_class_node(node: BaseNode, scope: dict, file_node_id: str) -> dict:",
                "text": "def format_class_node(node: BaseNode, scope: dict, file_node_id: str) -> dict:\n    name = scope[\"name\"]\n    signature = scope[\"signature\"]\n\n    processed_node = {\n        \"type\": \"CLASS\",\n        \"attributes\": {\n            \"name\": name,\n            \"signature\": signature,\n            \"text\": node.text,\n            \"node_id\": node.node_id,\n            \"file_node_id\": file_node_id,\n        },\n    }\n\n    return processed_node",
                "node_id": "b397caa4-eed9-4cc3-ae91-84c8b988c36f",
                "function_calls": [],
                "file_node_id": "17a6d02a-532b-4d6b-97e8-40983de11ec1",
                "path": "debugger_agent.graph_construction.utils.format_nodes.format_class_node",
                "label": "FUNCTION"
            }
        },
        {
            "id": "bf2c22b7-9802-479b-a0ea-a0b8fac1dc0c",
            "properties": {
                "name": "format_file_node",
                "signature": "def format_file_node(\n    node: BaseNode, no_extension_path: str, function_calls: list[str]\n) -> dict:",
                "text": "def format_file_node(\n    node: BaseNode, no_extension_path: str, function_calls: list[str]\n) -> dict:\n    processed_node = {\n        \"type\": \"FILE\",\n        \"attributes\": {\n            \"text\": node.text,\n            \"node_id\": node.node_id,\n            \"function_calls\": function_calls,\n            \"name\": os.path.basename(no_extension_path),\n        },\n    }\n\n    return processed_node",
                "node_id": "bf2c22b7-9802-479b-a0ea-a0b8fac1dc0c",
                "function_calls": [
                    "os.path.basename"
                ],
                "file_node_id": "17a6d02a-532b-4d6b-97e8-40983de11ec1",
                "path": "debugger_agent.graph_construction.utils.format_nodes.format_file_node",
                "label": "FUNCTION"
            }
        },
        {
            "id": "f5327d03-61c4-4b8d-b846-c2f33e31cbb0",
            "properties": {
                "name": "format_directory_node",
                "signature": "def format_directory_node(path: str, package: bool) -> dict:",
                "text": "def format_directory_node(path: str, package: bool) -> dict:\n    processed_node = {\n        \"attributes\": {\n            \"path\": path + \"/\",\n            \"name\": os.path.basename(path),\n            \"node_id\": str(uuid.uuid4),\n        },\n        \"type\": \"PACKAGE\" if package else \"FOLDER\",\n    }\n\n    return processed_node",
                "node_id": "f5327d03-61c4-4b8d-b846-c2f33e31cbb0",
                "function_calls": [
                    "os.path.basename",
                    "str"
                ],
                "file_node_id": "17a6d02a-532b-4d6b-97e8-40983de11ec1",
                "path": "debugger_agent.graph_construction.utils.format_nodes.format_directory_node",
                "label": "FUNCTION"
            }
        },
        {
            "id": "9929f1f6-a593-4992-9fa9-1939ab97853f",
            "properties": {
                "path": "debugger_agent/graph_construction/utils/__init__.py",
                "name": "__init__.py",
                "node_id": "9929f1f6-a593-4992-9fa9-1939ab97853f",
                "label": "FILE"
            }
        },
        {
            "id": "946a663b-7154-481d-9e7f-946cb5e97469",
            "properties": {
                "text": "import tree_sitter_languages\nimport os\nimport re\n\n\ndef traverse_tree(tree):\n    # Code replaced for brevity. See node_id 27f127d5-10a7-4fa8-abf2-32b98d4cc517\n\n\ndef count_parameters(params_str):\n    # Count parameters considering string literals and ignoring commas within them.\n    # This simplistic approach assumes balanced quotes and no escaped quotes within strings.\n    # Code replaced for brevity. See node_id 2c3bf719-5e0e-489f-97b4-ff952bdecac7\n\n\ndef get_function_name(call_str):\n    # Code replaced for brevity. See node_id 4ccebd0d-8822-4cec-b337-6f7867ccabc0\n\n\ndef parse_function_call(func_call: str, inclusive_scopes) -> tuple[str, int]:\n    # Code replaced for brevity. See node_id c775fa9c-2a7f-4341-83d0-095578447ad0\n\n\ndef get_function_calls(node, assigments_dict: dict) -> list[str]:\n    # Code replaced for brevity. See node_id 9d346e10-ddcc-44f9-b293-a92a413ba569\n\n\ndef is_package(directory):\n    # Code replaced for brevity. See node_id c39b6e46-be96-4884-8def-ab3ca16e546a\n\n\ndef find_module_path(module_name, start_dir, project_root):\n    # Code replaced for brevity. See node_id 3318fa58-ee17-4b13-9f89-204aac866a7a\n\n\ndef resolve_import_path(import_statement, current_file_directory, project_root):\n    # Code replaced for brevity. See node_id 22923bc0-5080-4ffa-868b-aa7033933c7a",
                "node_id": "946a663b-7154-481d-9e7f-946cb5e97469",
                "function_calls": [],
                "name": "tree_parser",
                "path": "debugger_agent.graph_construction.utils.tree_parser",
                "label": "FILE"
            }
        },
        {
            "id": "27f127d5-10a7-4fa8-abf2-32b98d4cc517",
            "properties": {
                "name": "traverse_tree",
                "signature": "def traverse_tree(tree):",
                "text": "def traverse_tree(tree):\n    cursor = tree.walk()\n    visited_children = False\n    while True:\n        if not visited_children:\n            yield cursor.node\n            if not cursor.goto_first_child():\n                visited_children = True\n        elif cursor.goto_next_sibling():\n            visited_children = False\n        elif not cursor.goto_parent():\n            break",
                "node_id": "27f127d5-10a7-4fa8-abf2-32b98d4cc517",
                "function_calls": [
                    "tree.walk",
                    "tree.walk.goto_first_child",
                    "tree.walk.goto_next_sibling",
                    "tree.walk.goto_parent"
                ],
                "file_node_id": "946a663b-7154-481d-9e7f-946cb5e97469",
                "path": "debugger_agent.graph_construction.utils.tree_parser.traverse_tree",
                "label": "FUNCTION"
            }
        },
        {
            "id": "2c3bf719-5e0e-489f-97b4-ff952bdecac7",
            "properties": {
                "name": "count_parameters",
                "signature": "def count_parameters(params_str):\n    # Count parameters considering string literals and ignoring commas within them.\n    # This simplistic approach assumes balanced quotes and no escaped quotes within strings.",
                "text": "def count_parameters(params_str):\n    # Count parameters considering string literals and ignoring commas within them.\n    # This simplistic approach assumes balanced quotes and no escaped quotes within strings.\n    in_string = False\n    param_count = (\n        0 if not params_str else 1\n    )  # Start with 1 parameter if the string is not empty\n\n    for char in params_str:\n        if char == '\"':\n            in_string = not in_string  # Toggle state\n        elif char == \",\" and not in_string:\n            param_count += (\n                1  # Count commas outside of string literals as parameter separators\n            )\n\n    # Edge case for empty parameter list or only spaces\n    if param_count == 1 and not params_str.strip():\n        return 0\n\n    return param_count",
                "node_id": "2c3bf719-5e0e-489f-97b4-ff952bdecac7",
                "function_calls": [
                    "params_str.strip"
                ],
                "file_node_id": "946a663b-7154-481d-9e7f-946cb5e97469",
                "path": "debugger_agent.graph_construction.utils.tree_parser.count_parameters",
                "label": "FUNCTION"
            }
        },
        {
            "id": "4ccebd0d-8822-4cec-b337-6f7867ccabc0",
            "properties": {
                "name": "get_function_name",
                "signature": "def get_function_name(call_str):",
                "text": "def get_function_name(call_str):\n    match = re.match(r\"([a-zA-Z_][\\w\\.]*)\\s*\\(\", call_str)\n    if match:\n        return match.group(1)  # Return the captured function name\n    else:\n        return None  # No function name found",
                "node_id": "4ccebd0d-8822-4cec-b337-6f7867ccabc0",
                "function_calls": [
                    "re.match",
                    "re.match.group"
                ],
                "file_node_id": "946a663b-7154-481d-9e7f-946cb5e97469",
                "path": "debugger_agent.graph_construction.utils.tree_parser.get_function_name",
                "label": "FUNCTION"
            }
        },
        {
            "id": "c775fa9c-2a7f-4341-83d0-095578447ad0",
            "properties": {
                "name": "parse_function_call",
                "signature": "def parse_function_call(func_call: str, inclusive_scopes) -> tuple[str, int]:",
                "text": "def parse_function_call(func_call: str, inclusive_scopes) -> tuple[str, int]:\n    func_name = get_function_name(func_call)\n\n    if func_name:\n        if \"self.\" in func_name:\n            for parent in reversed(inclusive_scopes[:-1]):\n                if parent[\"type\"] == \"class_definition\":\n                    func_name = func_name.replace(\"self.\", parent[\"name\"] + \".\")\n                    break\n\n        return func_name\n\n    return None",
                "node_id": "c775fa9c-2a7f-4341-83d0-095578447ad0",
                "function_calls": [
                    "get_function_name",
                    "reversed",
                    "func_name.replace.replace"
                ],
                "file_node_id": "946a663b-7154-481d-9e7f-946cb5e97469",
                "path": "debugger_agent.graph_construction.utils.tree_parser.parse_function_call",
                "label": "FUNCTION"
            }
        },
        {
            "id": "9d346e10-ddcc-44f9-b293-a92a413ba569",
            "properties": {
                "name": "get_function_calls",
                "signature": "def get_function_calls(node, assigments_dict: dict) -> list[str]:",
                "text": "def get_function_calls(node, assigments_dict: dict) -> list[str]:\n    code_text = node.text\n\n    parser = tree_sitter_languages.get_parser(\"python\")\n    tree = parser.parse(bytes(code_text, \"utf-8\"))\n    node_names = map(lambda node: node, traverse_tree(tree))\n\n    function_calls = []\n\n    for tree_node in node_names:\n        if tree_node.type == \"expression_statement\":\n            statement_children = tree_node.children\n            if statement_children[0].type == \"assignment\":\n                assigment = statement_children[0].named_children\n\n                variable_identifier = assigment[0]\n                assign_value = assigment[1]\n                if assign_value.type == \"call\":\n                    expression = assign_value\n                    expression_identifier = expression.named_children[0].text.decode()\n\n                    assigments_dict[variable_identifier.text.decode(\"utf-8\")] = (\n                        expression_identifier\n                    )\n\n        if tree_node.type == \"call\":\n            call_children = tree_node.named_children\n            if (\n                call_children[0].type == \"attribute\"\n                and call_children[1].type == \"argument_list\"\n            ):\n                attribute_children = call_children[0].named_children\n                root_caller = attribute_children[0]\n                if root_caller.type == \"identifier\":\n                    root_caller_identifier = root_caller.text.decode(\"utf-8\")\n                    if root_caller_identifier in assigments_dict:\n                        function_calls.append(\n                            assigments_dict[root_caller_identifier]\n                            + \".\"\n                            + attribute_children[1].text.decode(\"utf-8\")\n                            + \"()\"\n                        )\n                        continue\n            function_calls.append(tree_node.text.decode(\"utf-8\"))\n\n    parsed_function_calls = map(\n        lambda x: parse_function_call(x, node.metadata[\"inclusive_scopes\"]),\n        function_calls,\n    )\n\n    filtered_calls = filter(lambda x: x is not None, parsed_function_calls)\n    return list(filtered_calls)",
                "node_id": "9d346e10-ddcc-44f9-b293-a92a413ba569",
                "function_calls": [
                    "tree_sitter_languages.get_parser",
                    "tree_sitter_languages.get_parser.parse",
                    "bytes",
                    "map",
                    "traverse_tree",
                    "variable_identifier.text.decode",
                    "root_caller.text.decode",
                    "function_calls.append",
                    "function_calls.append",
                    "tree_node.text.decode",
                    "map",
                    "parse_function_call",
                    "filter",
                    "list"
                ],
                "file_node_id": "946a663b-7154-481d-9e7f-946cb5e97469",
                "path": "debugger_agent.graph_construction.utils.tree_parser.get_function_calls",
                "label": "FUNCTION"
            }
        },
        {
            "id": "c39b6e46-be96-4884-8def-ab3ca16e546a",
            "properties": {
                "name": "is_package",
                "signature": "def is_package(directory):",
                "text": "def is_package(directory):\n    return os.path.exists(os.path.join(directory, \"__init__.py\"))",
                "node_id": "c39b6e46-be96-4884-8def-ab3ca16e546a",
                "function_calls": [
                    "os.path.exists",
                    "os.path.join"
                ],
                "file_node_id": "946a663b-7154-481d-9e7f-946cb5e97469",
                "path": "debugger_agent.graph_construction.utils.tree_parser.is_package",
                "label": "FUNCTION"
            }
        },
        {
            "id": "3318fa58-ee17-4b13-9f89-204aac866a7a",
            "properties": {
                "name": "find_module_path",
                "signature": "def find_module_path(module_name, start_dir, project_root):",
                "text": "def find_module_path(module_name, start_dir, project_root):\n    current_dir = start_dir\n    components = module_name.split(\".\")\n\n    # Try to find the module by traversing up towards the root until the module path is found or root is reached\n    while current_dir.startswith(project_root):\n        possible_path = os.path.join(current_dir, *components)\n        # Check for a direct module or package\n        if os.path.exists(possible_path + \".py\") or is_package(possible_path):\n            return possible_path.replace(\"/\", \".\")\n        # Move one directory up\n        current_dir = os.path.dirname(current_dir)\n    return None",
                "node_id": "3318fa58-ee17-4b13-9f89-204aac866a7a",
                "function_calls": [
                    "module_name.split",
                    "current_dir.startswith",
                    "os.path.join",
                    "os.path.exists",
                    "is_package",
                    "os.path.join.replace",
                    "os.path.dirname"
                ],
                "file_node_id": "946a663b-7154-481d-9e7f-946cb5e97469",
                "path": "debugger_agent.graph_construction.utils.tree_parser.find_module_path",
                "label": "FUNCTION"
            }
        },
        {
            "id": "22923bc0-5080-4ffa-868b-aa7033933c7a",
            "properties": {
                "name": "resolve_import_path",
                "signature": "def resolve_import_path(import_statement, current_file_directory, project_root):",
                "text": "def resolve_import_path(import_statement, current_file_directory, project_root):\n    \"\"\"\n    Resolve the absolute path of an import statement.\n    import_statement: The imported module as a string (e.g., 'os', 'my_package.my_module').\n    current_file_directory: The directory of the file containing the import statement.\n    project_root: The root directory of the project.\n    \"\"\"\n    # Handling relative imports\n    if import_statement.startswith(\".\"):\n        parent_levels = import_statement.count(\".\")\n        relative_path = import_statement[parent_levels:].replace(\".\", os.sep)\n        base_path = current_file_directory\n        for _ in range(parent_levels - 1):\n            base_path = os.path.dirname(base_path)\n        absolute_path = os.path.join(base_path, relative_path)\n        if os.path.exists(absolute_path + \".py\"):\n            return absolute_path + \".py\"\n        elif is_package(absolute_path):\n            return absolute_path\n    else:\n        # Handling absolute imports\n        return find_module_path(import_statement, current_file_directory, project_root)\n\n    # If the module wasn't found, it might be a built-in or third-party module not contained within the project\n    return None",
                "node_id": "22923bc0-5080-4ffa-868b-aa7033933c7a",
                "function_calls": [
                    "import_statement.startswith",
                    "import_statement.count",
                    "range",
                    "os.path.dirname",
                    "os.path.join",
                    "os.path.exists",
                    "is_package",
                    "find_module_path"
                ],
                "file_node_id": "946a663b-7154-481d-9e7f-946cb5e97469",
                "path": "debugger_agent.graph_construction.utils.tree_parser.resolve_import_path",
                "label": "FUNCTION"
            }
        }
    ],
    "edges": [
        {
            "id": "8c6cb8dd-d23c-4121-94b5-11044eb03f61",
            "start": "<function uuid4 at 0x7312f2adeb00>",
            "end": "55425c7d-88e9-4a5d-9a67-42679ce48f0d",
            "properties": {
                "label": "CONTAINS"
            }
        },
        {
            "id": "1e1d628e-bbd5-4c55-afd0-df98be014796",
            "start": "<function uuid4 at 0x7312f2adeb00>",
            "end": "aabfed9b-6779-4280-b763-fd3d839c3893",
            "properties": {
                "label": "CONTAINS"
            }
        },
        {
            "id": "a9da2623-d68e-48c2-ab4d-8f947ba99135",
            "start": "<function uuid4 at 0x7312f2adeb00>",
            "end": "<function uuid4 at 0x7312f2adeb00>",
            "properties": {
                "label": "CONTAINS"
            }
        },
        {
            "id": "0ef94a53-a50b-460c-82cc-ecb30b730725",
            "start": "6c3acc52-2108-4323-a07e-997759044987",
            "end": "fd03e95a-1d67-4139-b27e-775f009b3061",
            "properties": {
                "label": "CLASS_DEFINITION"
            }
        },
        {
            "id": "2c8fab93-4783-4377-ba05-08e393596af4",
            "start": "fd03e95a-1d67-4139-b27e-775f009b3061",
            "end": "f71da8f3-6698-4305-8889-85f41273a642",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "eee44f8d-4cb8-4646-b3c6-f297013a1497",
            "start": "fd03e95a-1d67-4139-b27e-775f009b3061",
            "end": "a1a33463-d55c-4c89-a126-7867bac00f47",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "737f68dd-fca8-4879-8889-88ed65ff15c8",
            "start": "fd03e95a-1d67-4139-b27e-775f009b3061",
            "end": "ef5b971e-a8b5-46fa-b953-6b220f8910ea",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "1fc01e60-9e10-4eaf-a0f8-841a947dde6b",
            "start": "fd03e95a-1d67-4139-b27e-775f009b3061",
            "end": "e910d0fc-2476-4e9b-a3c2-7a1120ee5568",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "de342cab-6856-44c4-89ba-2af01a2b87da",
            "start": "<function uuid4 at 0x7312f2adeb00>",
            "end": "6c3acc52-2108-4323-a07e-997759044987",
            "properties": {
                "label": "CONTAINS"
            }
        },
        {
            "id": "ea3efda6-7092-49d5-a629-c6ed8716a1b5",
            "start": "77803f41-7f7e-4a01-a25a-4aef31bceaa4",
            "end": "49d5d073-8638-4f1b-a1ce-a612b2161bf2",
            "properties": {
                "label": "CLASS_DEFINITION"
            }
        },
        {
            "id": "2c3d482b-17a6-4938-baff-f7ce3bb75062",
            "start": "49d5d073-8638-4f1b-a1ce-a612b2161bf2",
            "end": "da10527f-a6cf-4bd0-b31a-82368c79cd66",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "2eced1cf-eaec-435c-93ae-08e60b08f538",
            "start": "49d5d073-8638-4f1b-a1ce-a612b2161bf2",
            "end": "55820510-96a7-43fe-be2c-39b6375ec28d",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "efff730e-4c48-44f9-9542-5842a3b7092e",
            "start": "49d5d073-8638-4f1b-a1ce-a612b2161bf2",
            "end": "e980da30-0464-46aa-91fb-4d2d161ab630",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "59ffb46b-c376-456e-a6d3-82ea9748a85d",
            "start": "49d5d073-8638-4f1b-a1ce-a612b2161bf2",
            "end": "1fefc75f-b3e4-41b6-979e-65755fd58d40",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "1a1d1127-24a8-4eb8-99c9-623107ca8f29",
            "start": "<function uuid4 at 0x7312f2adeb00>",
            "end": "77803f41-7f7e-4a01-a25a-4aef31bceaa4",
            "properties": {
                "label": "CONTAINS"
            }
        },
        {
            "id": "d78e8493-bbc0-4c88-9ebf-84aca2af0d64",
            "start": "66152f32-5fbb-40df-a2b9-1a840bc69497",
            "end": "aaff0033-1132-48f5-881f-941f15c4c9fc",
            "properties": {
                "label": "CLASS_DEFINITION"
            }
        },
        {
            "id": "011efcec-d5b3-47b0-8132-3638b74bc785",
            "start": "aaff0033-1132-48f5-881f-941f15c4c9fc",
            "end": "c035a716-8139-4331-b57c-d6222cd690d7",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "347b4d68-eccb-4f17-b9d4-0d34e57fb317",
            "start": "aaff0033-1132-48f5-881f-941f15c4c9fc",
            "end": "7cb127e9-0694-4b2d-98e1-2fbedb7c8f15",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "08bbe30e-6c5d-4e3e-a6e1-c8aab4c29d16",
            "start": "aaff0033-1132-48f5-881f-941f15c4c9fc",
            "end": "0ac33b5b-ca3b-4f61-87c2-02fd70f2e0e8",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "52de8fbf-3322-4b5f-aa50-9bd7544f1e41",
            "start": "aaff0033-1132-48f5-881f-941f15c4c9fc",
            "end": "1ab9617b-479e-402c-831a-c74cc89f7770",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "22befeaa-ad77-4d29-8ffe-1c0b655117e3",
            "start": "aaff0033-1132-48f5-881f-941f15c4c9fc",
            "end": "4f2c90ec-82de-4e82-9f26-ff730ebc7ab7",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "a7c40fe4-d10a-4072-a81f-b1634556e92c",
            "start": "<function uuid4 at 0x7312f2adeb00>",
            "end": "66152f32-5fbb-40df-a2b9-1a840bc69497",
            "properties": {
                "label": "CONTAINS"
            }
        },
        {
            "id": "a9822f7a-bd19-4794-a5b2-cebdf318dded",
            "start": "<function uuid4 at 0x7312f2adeb00>",
            "end": "<function uuid4 at 0x7312f2adeb00>",
            "properties": {
                "label": "CONTAINS"
            }
        },
        {
            "id": "1949256a-a31f-49ca-bedc-0fbbc1d32281",
            "start": "17a6d02a-532b-4d6b-97e8-40983de11ec1",
            "end": "f2340ab7-b027-44fd-b479-bb47d1f7a8a4",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "3a7222d7-48cb-462f-b876-0e195f2c77ff",
            "start": "17a6d02a-532b-4d6b-97e8-40983de11ec1",
            "end": "b397caa4-eed9-4cc3-ae91-84c8b988c36f",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "32b47506-f6be-45d3-8d28-389acefdc5b6",
            "start": "17a6d02a-532b-4d6b-97e8-40983de11ec1",
            "end": "bf2c22b7-9802-479b-a0ea-a0b8fac1dc0c",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "54ae5bde-716a-4bf9-91a2-bb2177338f41",
            "start": "17a6d02a-532b-4d6b-97e8-40983de11ec1",
            "end": "f5327d03-61c4-4b8d-b846-c2f33e31cbb0",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "a59c6c01-c0c1-469a-99b6-e540723c2c45",
            "start": "<function uuid4 at 0x7312f2adeb00>",
            "end": "17a6d02a-532b-4d6b-97e8-40983de11ec1",
            "properties": {
                "label": "CONTAINS"
            }
        },
        {
            "id": "f1d89b73-752b-4e3d-a094-782a39bfce08",
            "start": "<function uuid4 at 0x7312f2adeb00>",
            "end": "9929f1f6-a593-4992-9fa9-1939ab97853f",
            "properties": {
                "label": "CONTAINS"
            }
        },
        {
            "id": "16542fea-07d6-42aa-8fc0-3082b3b9c846",
            "start": "946a663b-7154-481d-9e7f-946cb5e97469",
            "end": "27f127d5-10a7-4fa8-abf2-32b98d4cc517",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "69362eef-d0cf-4d80-b30a-dc111f3427e5",
            "start": "946a663b-7154-481d-9e7f-946cb5e97469",
            "end": "2c3bf719-5e0e-489f-97b4-ff952bdecac7",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "32c1c60b-eeae-4436-9293-f763e69527e5",
            "start": "946a663b-7154-481d-9e7f-946cb5e97469",
            "end": "4ccebd0d-8822-4cec-b337-6f7867ccabc0",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "4bcabfaf-6b0f-4529-ab69-35af1957d146",
            "start": "946a663b-7154-481d-9e7f-946cb5e97469",
            "end": "c775fa9c-2a7f-4341-83d0-095578447ad0",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "ab656acd-bf75-4c04-ae10-806123584fa8",
            "start": "946a663b-7154-481d-9e7f-946cb5e97469",
            "end": "9d346e10-ddcc-44f9-b293-a92a413ba569",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "8182918b-5173-4dcc-8ccf-1b1ca1b3436b",
            "start": "946a663b-7154-481d-9e7f-946cb5e97469",
            "end": "c39b6e46-be96-4884-8def-ab3ca16e546a",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "1789f37f-a4fc-4db9-ae00-7760859d3f68",
            "start": "946a663b-7154-481d-9e7f-946cb5e97469",
            "end": "3318fa58-ee17-4b13-9f89-204aac866a7a",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "ef99af18-e56a-47aa-9094-d2c66bb49b1e",
            "start": "946a663b-7154-481d-9e7f-946cb5e97469",
            "end": "22923bc0-5080-4ffa-868b-aa7033933c7a",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "89753f0c-c7f7-4040-a994-6d3a4234df22",
            "start": "<function uuid4 at 0x7312f2adeb00>",
            "end": "946a663b-7154-481d-9e7f-946cb5e97469",
            "properties": {
                "label": "CONTAINS"
            }
        },
        {
            "id": "61156d5c-344e-4e98-acf5-2bf3ab6b14c7",
            "start": "55425c7d-88e9-4a5d-9a67-42679ce48f0d",
            "end": "aaff0033-1132-48f5-881f-941f15c4c9fc",
            "properties": {
                "label": "IMPORTS"
            }
        },
        {
            "id": "1f29059f-f815-4cd8-8be2-c801fb83fa4f",
            "start": "55425c7d-88e9-4a5d-9a67-42679ce48f0d",
            "end": "fd03e95a-1d67-4139-b27e-775f009b3061",
            "properties": {
                "label": "IMPORTS"
            }
        },
        {
            "id": "2549cc34-6454-4f11-bcb5-91ce3d1ec8ea",
            "start": "77803f41-7f7e-4a01-a25a-4aef31bceaa4",
            "end": "17a6d02a-532b-4d6b-97e8-40983de11ec1",
            "properties": {
                "label": "IMPORTS"
            }
        },
        {
            "id": "96e71100-26f4-4d4e-aa90-2151eff6cfa5",
            "start": "77803f41-7f7e-4a01-a25a-4aef31bceaa4",
            "end": "946a663b-7154-481d-9e7f-946cb5e97469",
            "properties": {
                "label": "IMPORTS"
            }
        },
        {
            "id": "9c68903f-ac3d-4e4b-a352-42b7886d6e25",
            "start": "66152f32-5fbb-40df-a2b9-1a840bc69497",
            "end": "49d5d073-8638-4f1b-a1ce-a612b2161bf2",
            "properties": {
                "label": "IMPORTS"
            }
        },
        {
            "id": "e3a28119-4ab1-4d2c-901f-78b8153e32db",
            "start": "66152f32-5fbb-40df-a2b9-1a840bc69497",
            "end": "17a6d02a-532b-4d6b-97e8-40983de11ec1",
            "properties": {
                "label": "IMPORTS"
            }
        },
        {
            "id": "7054c9e0-3024-4666-bbd5-e95d4c97abd0",
            "start": "55425c7d-88e9-4a5d-9a67-42679ce48f0d",
            "end": "fd03e95a-1d67-4139-b27e-775f009b3061",
            "properties": {
                "label": "INSTANTIATES"
            }
        },
        {
            "id": "5a8eeda9-ecf4-4e05-9063-2eb0cdaf8a87",
            "start": "55425c7d-88e9-4a5d-9a67-42679ce48f0d",
            "end": "f71da8f3-6698-4305-8889-85f41273a642",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "3a0ecc94-5d5a-4655-ab09-e754b352244d",
            "start": "55425c7d-88e9-4a5d-9a67-42679ce48f0d",
            "end": "aaff0033-1132-48f5-881f-941f15c4c9fc",
            "properties": {
                "label": "INSTANTIATES"
            }
        },
        {
            "id": "781cf028-ab96-41db-858e-af900bcb07b2",
            "start": "55425c7d-88e9-4a5d-9a67-42679ce48f0d",
            "end": "c035a716-8139-4331-b57c-d6222cd690d7",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "e1ca0580-ae61-4e24-bd04-7b444d47d853",
            "start": "55425c7d-88e9-4a5d-9a67-42679ce48f0d",
            "end": "4f2c90ec-82de-4e82-9f26-ff730ebc7ab7",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "6bfd2fc6-d0e5-419a-b3f9-ea9f82fce2dc",
            "start": "55820510-96a7-43fe-be2c-39b6375ec28d",
            "end": "e980da30-0464-46aa-91fb-4d2d161ab630",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "dcb2df62-7360-40af-b19e-9239842dd74a",
            "start": "55820510-96a7-43fe-be2c-39b6375ec28d",
            "end": "e980da30-0464-46aa-91fb-4d2d161ab630",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "2893c658-9e25-4776-9731-d7e0765bbd01",
            "start": "55820510-96a7-43fe-be2c-39b6375ec28d",
            "end": "1fefc75f-b3e4-41b6-979e-65755fd58d40",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "7f6dd537-57be-4f22-9ece-2be78c3bf648",
            "start": "e980da30-0464-46aa-91fb-4d2d161ab630",
            "end": "9d346e10-ddcc-44f9-b293-a92a413ba569",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "4ca7128d-7684-4090-be38-dd827a28323e",
            "start": "e980da30-0464-46aa-91fb-4d2d161ab630",
            "end": "f2340ab7-b027-44fd-b479-bb47d1f7a8a4",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "a6e27f69-500a-4b76-866f-84b1d60f126f",
            "start": "e980da30-0464-46aa-91fb-4d2d161ab630",
            "end": "b397caa4-eed9-4cc3-ae91-84c8b988c36f",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "35d1d3bf-03d7-4540-bd3a-5a2799db5f66",
            "start": "e980da30-0464-46aa-91fb-4d2d161ab630",
            "end": "9d346e10-ddcc-44f9-b293-a92a413ba569",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "e0298a42-0e54-4e10-a02e-f8d5ff74bd0d",
            "start": "e980da30-0464-46aa-91fb-4d2d161ab630",
            "end": "bf2c22b7-9802-479b-a0ea-a0b8fac1dc0c",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "8b36b68b-d1fe-4834-bb8a-96e31aca0de8",
            "start": "1fefc75f-b3e4-41b6-979e-65755fd58d40",
            "end": "22923bc0-5080-4ffa-868b-aa7033933c7a",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "4430bd18-56a3-424d-987a-acc8320d28ed",
            "start": "7cb127e9-0694-4b2d-98e1-2fbedb7c8f15",
            "end": "f5327d03-61c4-4b8d-b846-c2f33e31cbb0",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "d1a6812b-de1a-4133-bbec-583b2822e24f",
            "start": "7cb127e9-0694-4b2d-98e1-2fbedb7c8f15",
            "end": "49d5d073-8638-4f1b-a1ce-a612b2161bf2",
            "properties": {
                "label": "INSTANTIATES"
            }
        },
        {
            "id": "1d25e544-68b3-4178-97e6-8dd16527b514",
            "start": "7cb127e9-0694-4b2d-98e1-2fbedb7c8f15",
            "end": "da10527f-a6cf-4bd0-b31a-82368c79cd66",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "7b091d81-7f8c-49de-9a5f-04eea7a79321",
            "start": "7cb127e9-0694-4b2d-98e1-2fbedb7c8f15",
            "end": "55820510-96a7-43fe-be2c-39b6375ec28d",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "52d919f7-cbf8-4cbd-840f-6caebc30fb88",
            "start": "7cb127e9-0694-4b2d-98e1-2fbedb7c8f15",
            "end": "7cb127e9-0694-4b2d-98e1-2fbedb7c8f15",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "1df1c98f-8512-4651-acdc-c92adb1fb3dc",
            "start": "4f2c90ec-82de-4e82-9f26-ff730ebc7ab7",
            "end": "7cb127e9-0694-4b2d-98e1-2fbedb7c8f15",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "390d6fcb-1c2a-4be6-bd1e-61373328027c",
            "start": "4f2c90ec-82de-4e82-9f26-ff730ebc7ab7",
            "end": "0ac33b5b-ca3b-4f61-87c2-02fd70f2e0e8",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "cc9a1978-b6ab-44ec-a3ec-e3ef2580aa65",
            "start": "4f2c90ec-82de-4e82-9f26-ff730ebc7ab7",
            "end": "1ab9617b-479e-402c-831a-c74cc89f7770",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "baf79206-90f7-42dd-8f58-fc15a9981d7b",
            "start": "c775fa9c-2a7f-4341-83d0-095578447ad0",
            "end": "4ccebd0d-8822-4cec-b337-6f7867ccabc0",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "ef519362-2c13-4952-a807-112de40d593d",
            "start": "9d346e10-ddcc-44f9-b293-a92a413ba569",
            "end": "27f127d5-10a7-4fa8-abf2-32b98d4cc517",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "8ea9edd3-e930-43bc-b8b7-bf350f2b8e22",
            "start": "9d346e10-ddcc-44f9-b293-a92a413ba569",
            "end": "c775fa9c-2a7f-4341-83d0-095578447ad0",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "064a3caf-a8d2-465c-b914-773d21913852",
            "start": "3318fa58-ee17-4b13-9f89-204aac866a7a",
            "end": "c39b6e46-be96-4884-8def-ab3ca16e546a",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "9cf41b51-d671-4053-ab1d-ace761c8cd19",
            "start": "22923bc0-5080-4ffa-868b-aa7033933c7a",
            "end": "c39b6e46-be96-4884-8def-ab3ca16e546a",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "630e212a-62ed-498e-b571-fca770622dce",
            "start": "22923bc0-5080-4ffa-868b-aa7033933c7a",
            "end": "3318fa58-ee17-4b13-9f89-204aac866a7a",
            "properties": {
                "label": "CALLS"
            }
        }
    ]
}
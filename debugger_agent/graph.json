{
    "nodes": [
        {
            "id": "98477be8-38db-4d7e-9167-3d5ea2239427",
            "properties": {
                "path": "src/",
                "name": "src",
                "node_id": "<function uuid4 at 0x707d38482c20>",
                "label": "PACKAGE"
            }
        },
        {
            "id": "e02dd498-544e-42f0-8a86-2ed23663b5fa",
            "properties": {
                "text": "from graph_construction.graph_builder import GraphConstructor\nfrom graph_construction.db_manager import JSONManager\n\ngraph_manager = JSONManager()\ngraph_constructor = GraphConstructor(graph_manager)\ngraph_constructor.build_graph(\"src\", \"python\")",
                "node_id": "9c8f5661-4770-4f98-8fc0-4b9db8b86b91",
                "path": "src.run",
                "directory": "src/",
                "name": "run.py",
                "label": "FILE_ROOT"
            }
        },
        {
            "id": "0a580f9d-ffea-4905-a4c7-75f6eca2035d",
            "properties": {
                "path": "src/__init__.py",
                "name": "__init__.py",
                "node_id": "3da8c8ff-65cf-40cc-95d9-441bed91f00c",
                "label": "FILE"
            }
        },
        {
            "id": "398cbe76-07bd-4d49-b4a2-17edc7638832",
            "properties": {
                "path": "src/test_documents/",
                "name": "test_documents",
                "node_id": "<function uuid4 at 0x707d38482c20>",
                "label": "FOLDER"
            }
        },
        {
            "id": "6dbf0839-8e95-45ce-b1bf-933cc3c74d77",
            "properties": {
                "text": "class Test:\n    # Code replaced for brevity. See node_id cb037706-eeae-4349-8fbe-de306408d128\n\n\ntest = Test()\ntest.hello()",
                "node_id": "1edba36e-4eb5-4d4b-a192-34e4a83c404a",
                "path": "src.test_documents.test",
                "directory": "src/test_documents/",
                "name": "test.py",
                "label": "FILE_ROOT"
            }
        },
        {
            "id": "a34fafde-541a-48ac-9bba-a26a536d380d",
            "properties": {
                "name": "Test",
                "signature": "class Test:",
                "text": "class Test:\n    def hello(self):\n        # Code replaced for brevity. See node_id 56502537-c8d8-4d92-b954-7d86b661cb2b\n\n    def factorial(self, n):\n        # Code replaced for brevity. See node_id 58f2a8f0-ac54-46e2-9d56-29b96c76b7fd\n\n    def fibonacci(self, n):\n        # Code replaced for brevity. See node_id b1e6cfda-ff77-4bb9-b979-2b59383dd0e1\n\n    def hello2(self):\n        # Code replaced for brevity. See node_id 60c239f1-c733-4ee5-83ee-344dfb1087a0",
                "node_id": "cb037706-eeae-4349-8fbe-de306408d128",
                "path": "src.test_documents.test.Test",
                "label": "CLASS"
            }
        },
        {
            "id": "9b5cc1e6-2f86-49ef-a0c5-78cb617f6ed0",
            "properties": {
                "name": "hello",
                "signature": "def hello(self):",
                "text": "def hello(self):\n        def hello2():\n                # Code replaced for brevity. See node_id aa5545ff-db1a-47b2-89b8-79a2cced12be\n\n        hello2()\n        self.hello2()\n        a = 1\n        print(\"Hello, world!\")",
                "node_id": "56502537-c8d8-4d92-b954-7d86b661cb2b",
                "path": "src.test_documents.test.Test.hello",
                "label": "FUNCTION"
            }
        },
        {
            "id": "23324db8-91c1-43e4-b207-355f9d7cfa4b",
            "properties": {
                "name": "hello2",
                "signature": "def hello2():",
                "text": "def hello2():\n            self.fibonacci(2)\n            print(\"Hello, world! 2\")",
                "node_id": "aa5545ff-db1a-47b2-89b8-79a2cced12be",
                "path": "src.test_documents.test.Test.hello.hello2",
                "label": "FUNCTION"
            }
        },
        {
            "id": "21d76bb9-97b2-4cd6-9d69-5d2c009c1254",
            "properties": {
                "name": "factorial",
                "signature": "def factorial(self, n):",
                "text": "def factorial(self, n):\n        result = 1\n        for i in range(1, n + 1):\n            result *= i\n        return result",
                "node_id": "58f2a8f0-ac54-46e2-9d56-29b96c76b7fd",
                "path": "src.test_documents.test.Test.factorial",
                "label": "FUNCTION"
            }
        },
        {
            "id": "099479d1-d94f-422a-bc77-38f44ef757e2",
            "properties": {
                "name": "fibonacci",
                "signature": "def fibonacci(self, n):",
                "text": "def fibonacci(self, n):\n        a, b = 0, 1\n        while a < n:\n            print(a, end=\" \")\n            a, b = b, a + b",
                "node_id": "b1e6cfda-ff77-4bb9-b979-2b59383dd0e1",
                "path": "src.test_documents.test.Test.fibonacci",
                "label": "FUNCTION"
            }
        },
        {
            "id": "385a6c22-db5b-4ac1-a614-04266b55de69",
            "properties": {
                "name": "hello2",
                "signature": "def hello2(self):",
                "text": "def hello2(self):\n        print(\"hc\")",
                "node_id": "60c239f1-c733-4ee5-83ee-344dfb1087a0",
                "path": "src.test_documents.test.Test.hello2",
                "label": "FUNCTION"
            }
        },
        {
            "id": "8bb16b47-c6c1-4740-941a-e58b29f7bd61",
            "properties": {
                "path": "src/graph_construction/",
                "name": "graph_construction",
                "node_id": "<function uuid4 at 0x707d38482c20>",
                "label": "PACKAGE"
            }
        },
        {
            "id": "5f046301-4122-455e-bbb9-e73601779289",
            "properties": {
                "path": "src/graph_construction/__pycache__/",
                "name": "__pycache__",
                "node_id": "<function uuid4 at 0x707d38482c20>",
                "label": "FOLDER"
            }
        },
        {
            "id": "ac13bd88-6956-4c56-ada7-3b2e060f3ca8",
            "properties": {
                "path": "src/graph_construction/__pycache__/graph_builder.cpython-310.pyc",
                "name": "graph_builder.cpython-310.pyc",
                "node_id": "855d04a3-c7b8-4fc7-80e0-cf3f243373ad",
                "label": "FILE"
            }
        },
        {
            "id": "b703c552-c881-4470-9171-fa9788b99f54",
            "properties": {
                "path": "src/graph_construction/__pycache__/__init__.cpython-310.pyc",
                "name": "__init__.cpython-310.pyc",
                "node_id": "aab290cd-1855-4a8a-b6f1-ef14c0cee9b2",
                "label": "FILE"
            }
        },
        {
            "id": "d69c92d7-2267-410c-b9b5-dae243860a68",
            "properties": {
                "path": "src/graph_construction/__pycache__/db_manager.cpython-310.pyc",
                "name": "db_manager.cpython-310.pyc",
                "node_id": "2efbc8c6-9919-4eed-8839-cdbdd45d6705",
                "label": "FILE"
            }
        },
        {
            "id": "0ea91293-1314-4f47-bc9e-5d6edb66f7b1",
            "properties": {
                "text": "import json\nimport uuid\nfrom typing import List, Any\n\nclass JSONManager:\n    # Code replaced for brevity. See node_id a84a9339-13f5-42e3-910e-e144a9dafd41",
                "node_id": "236f4472-e337-416f-b587-4bb7b94069cb",
                "path": "src.graph_construction.db_manager",
                "directory": "src/graph_construction/",
                "name": "db_manager.py",
                "label": "FILE_ROOT"
            }
        },
        {
            "id": "ba52d0de-166c-436e-943a-76f0bcf3b2e5",
            "properties": {
                "name": "JSONManager",
                "signature": "class JSONManager:",
                "text": "class JSONManager:\n    def __init__(self, default_path: str = \"graph.json\"):\n        # Code replaced for brevity. See node_id a967c168-2cc6-45d0-a7f6-f7acc1d7ae4c\n\n    def save_graph(self, nodes: List[Any], edges: List[Any], path: str = None):\n        # Code replaced for brevity. See node_id cb9c9c6b-d9b3-4bfa-bb36-3c4a5865282b\n\n    def format_node(self, node):\n        # Code replaced for brevity. See node_id 93f21d12-6f7b-40d1-93ae-cf5d2847fa14\n\n    def format_edge(self, edge):\n        # Code replaced for brevity. See node_id 805c336f-4104-4f8d-b60e-4d45d1be6fc6",
                "node_id": "a84a9339-13f5-42e3-910e-e144a9dafd41",
                "path": "src.graph_construction.db_manager.JSONManager",
                "label": "CLASS"
            }
        },
        {
            "id": "c4c2a72e-6f4f-4231-8ac4-64428e75f51b",
            "properties": {
                "name": "__init__",
                "signature": "def __init__(self, default_path: str = \"graph.json\"):",
                "text": "def __init__(self, default_path: str = \"graph.json\"):\n        self.default_path = default_path\n        self.node_dict = {}",
                "node_id": "a967c168-2cc6-45d0-a7f6-f7acc1d7ae4c",
                "function_calls": [],
                "path": "src.graph_construction.db_manager.JSONManager.__init__",
                "label": "FUNCTION"
            }
        },
        {
            "id": "16e422b4-bc67-4e7c-9501-5e05b40d0e50",
            "properties": {
                "name": "save_graph",
                "signature": "def save_graph(self, nodes: List[Any], edges: List[Any], path: str = None):",
                "text": "def save_graph(self, nodes: List[Any], edges: List[Any], path: str = None):\n        if path is None:\n            path = self.default_path\n        with open(path, \"w\") as f:\n            formatted_nodes = list(map(self.format_node, nodes))\n            formatted_edges = list(map(self.format_edge, edges))\n            json.dump({\"nodes\": formatted_nodes, \"edges\": formatted_edges}, f, indent=4)",
                "node_id": "cb9c9c6b-d9b3-4bfa-bb36-3c4a5865282b",
                "path": "src.graph_construction.db_manager.JSONManager.save_graph",
                "label": "FUNCTION"
            }
        },
        {
            "id": "af8719a1-eb11-48e3-b2b9-8b2b7cc43fc8",
            "properties": {
                "name": "format_node",
                "signature": "def format_node(self, node):",
                "text": "def format_node(self, node):\n        formatted_node = {\n            \"id\": str(uuid.uuid4()),\n            \"properties\": {\n                **node[\"attributes\"],\n                \"label\": node[\"type\"]\n            }\n        }\n        self.node_dict[str(formatted_node[\"properties\"][\"node_id\"])] = formatted_node[\"id\"]\n        return formatted_node",
                "node_id": "93f21d12-6f7b-40d1-93ae-cf5d2847fa14",
                "path": "src.graph_construction.db_manager.JSONManager.format_node",
                "label": "FUNCTION"
            }
        },
        {
            "id": "138212a6-969b-411d-ace2-70bb1a6bd3d8",
            "properties": {
                "name": "format_edge",
                "signature": "def format_edge(self, edge):",
                "text": "def format_edge(self, edge):\n        formatted_edge = {\n            \"id\": str(uuid.uuid4()),\n            \"start\": self.node_dict[str(edge[\"sourceId\"])],\n            \"end\": self.node_dict[str(edge[\"targetId\"])],\n            \"properties\": {\n                \"label\": edge[\"type\"]\n            }\n        }\n        return formatted_edge",
                "node_id": "805c336f-4104-4f8d-b60e-4d45d1be6fc6",
                "path": "src.graph_construction.db_manager.JSONManager.format_edge",
                "label": "FUNCTION"
            }
        },
        {
            "id": "71169d16-00d4-45e4-b0ff-b6eb23fef026",
            "properties": {
                "text": "import os\nfrom pathlib import Path\nimport tree_sitter_languages\nfrom ..utils import format_nodes, tree_parser\nfrom llama_index.core import SimpleDirectoryReader\nfrom llama_index.core.schema import NodeRelationship, BaseNode\nfrom llama_index.core.text_splitter import CodeSplitter\nfrom llama_index.packs.code_hierarchy import CodeHierarchyNodeParser\n\n\nclass GraphFileParser:\n    # Code replaced for brevity. See node_id 9f199833-29bb-4555-a51f-abaaddd32972",
                "node_id": "09538856-857c-46cc-a35c-bf92c8272b95",
                "path": "src.graph_construction.graph_file_parser",
                "directory": "src/graph_construction/",
                "name": "graph_file_parser.py",
                "label": "FILE_ROOT"
            }
        },
        {
            "id": "f302cbed-c6e8-4307-a6df-dd38d1a73222",
            "properties": {
                "name": "GraphFileParser",
                "signature": "class GraphFileParser:",
                "text": "class GraphFileParser:\n    RELATIONS_TYPES_MAP = {\n        \"function_definition\": \"FUNCTION_DEFINITION\",\n        \"class_definition\": \"CLASS_DEFINITION\",\n    }\n\n    def __init__(\n        self,\n        file_path: str,\n        root_path: str,\n        language: str,\n        directory_path: str,\n        visited_nodes: dict,\n        global_imports: dict,\n    ):\n        # Code replaced for brevity. See node_id c861b80a-465b-47fe-b854-5c99048583b4\n\n    def parse(self):\n        # Code replaced for brevity. See node_id df3d1b9e-3cab-49ab-b863-102b4307d509\n\n    def __process_node__(\n        self, node: BaseNode, no_extension_path: str, file_node_id: str\n    ):\n        # Code replaced for brevity. See node_id 79a295aa-d499-453b-b4d1-5748a3606332\n\n    def _get_imports(self, path: str, file_node_id: str) -> dict:\n        # Code replaced for brevity. See node_id d6134f8a-7e7d-47d5-8a33-70eb561a036e",
                "node_id": "9f199833-29bb-4555-a51f-abaaddd32972",
                "path": "src.graph_construction.graph_file_parser.GraphFileParser",
                "label": "CLASS"
            }
        },
        {
            "id": "d55d03b9-df1c-48e1-a4c8-c4bbc85e5e5a",
            "properties": {
                "name": "__init__",
                "signature": "def __init__(\n        self,\n        file_path: str,\n        root_path: str,\n        language: str,\n        directory_path: str,\n        visited_nodes: dict,\n        global_imports: dict,\n    ):",
                "text": "def __init__(\n        self,\n        file_path: str,\n        root_path: str,\n        language: str,\n        directory_path: str,\n        visited_nodes: dict,\n        global_imports: dict,\n    ):\n        self.file_path = file_path\n        self.language = language\n        self.directory_path = directory_path\n        self.visited_nodes = visited_nodes\n        self.global_imports = global_imports\n        self.root_path = root_path",
                "node_id": "c861b80a-465b-47fe-b854-5c99048583b4",
                "function_calls": [],
                "path": "src.graph_construction.graph_file_parser.GraphFileParser.__init__",
                "label": "FUNCTION"
            }
        },
        {
            "id": "48c3d5fe-774f-4763-b343-18ca1cb9728c",
            "properties": {
                "name": "parse",
                "signature": "def parse(self):",
                "text": "def parse(self):\n        path = Path(self.file_path)\n        if not path.exists():\n            print(f\"File {self.file_path} does not exist.\")\n            return\n        documents = SimpleDirectoryReader(\n            input_files=[path],\n            file_metadata=lambda x: {\"filepath\": x},\n        ).load_data()\n\n        code = CodeHierarchyNodeParser(\n            language=self.language,\n            chunk_min_characters=3,\n            code_splitter=CodeSplitter(\n                language=self.language, max_chars=10000, chunk_lines=10\n            ),\n        )\n        no_extension_path = self.file_path.replace(\".py\", \"\")\n\n        split_nodes = code.get_nodes_from_documents(documents)\n        node_list = []\n        edges_list = []\n\n        file_node, file_relations = self.__process_node__(\n            split_nodes.pop(0), no_extension_path, \"\"\n        )\n        file_node[\"directory\"] = self.directory_path\n        file_node[\"name\"] = os.path.basename(self.file_path)\n        node_list.append(file_node)\n        edges_list.extend(file_relations)\n\n        for node in split_nodes:\n            processed_node, relationships = self.__process_node__(\n                node, no_extension_path, file_node[\"attributes\"][\"node_id\"]\n            )\n            node_list.append(processed_node)\n            edges_list.extend(relationships)\n\n        imports = self._get_imports(str(path), node_list[0][\"attributes\"][\"node_id\"])\n\n        return node_list, edges_list, imports",
                "node_id": "df3d1b9e-3cab-49ab-b863-102b4307d509",
                "path": "src.graph_construction.graph_file_parser.GraphFileParser.parse",
                "label": "FUNCTION"
            }
        },
        {
            "id": "363cc239-ce19-47c3-8e50-a49c2eeb780d",
            "properties": {
                "name": "__process_node__",
                "signature": "def __process_node__(\n        self, node: BaseNode, no_extension_path: str, file_node_id: str\n    ):",
                "text": "def __process_node__(\n        self, node: BaseNode, no_extension_path: str, file_node_id: str\n    ):\n        relationships = []\n        asignments_dict = {}\n        scope = (\n            node.metadata[\"inclusive_scopes\"][-1]\n            if node.metadata[\"inclusive_scopes\"]\n            else None\n        )\n        type_node = \"file\"\n        if scope:\n            type_node = scope[\"type\"]\n\n        if type_node == \"function_definition\":\n            function_calls = tree_parser.get_function_calls(node, asignments_dict)\n            processed_node = format_nodes.format_function_node(\n                node, scope, function_calls, file_node_id\n            )\n        elif type_node == \"class_definition\":\n            processed_node = format_nodes.format_class_node(node, scope, file_node_id)\n        else:\n            function_calls = tree_parser.get_function_calls(node, asignments_dict)\n            processed_node = format_nodes.format_file_node(\n                node, no_extension_path, function_calls\n            )\n\n        for relation in node.relationships.items():\n            if relation[0] == NodeRelationship.CHILD:\n                for child in relation[1]:\n                    relation_type = (\n                        child.metadata[\"inclusive_scopes\"][-1][\"type\"]\n                        if child.metadata[\"inclusive_scopes\"]\n                        else \"\"\n                    )\n                    relationships.append(\n                        {\n                            \"sourceId\": node.node_id,\n                            \"targetId\": child.node_id,\n                            \"type\": self.RELATIONS_TYPES_MAP.get(\n                                relation_type, \"UNKNOWN\"\n                            ),\n                        }\n                    )\n            elif relation[0] == NodeRelationship.PARENT:\n                if relation[1]:\n                    parent_path = self.visited_nodes.get(\n                        relation[1].node_id, no_extension_path\n                    ).replace(\"/\", \".\")\n                    node_path = f\"{parent_path}.{processed_node['attributes']['name']}\"\n                else:\n                    node_path = no_extension_path.replace(\"/\", \".\")\n        processed_node[\"attributes\"][\"path\"] = node_path\n        self.global_imports[node_path] = {\n            \"id\": processed_node[\"attributes\"][\"node_id\"],\n            \"type\": processed_node[\"type\"],\n        }\n        self.visited_nodes[node.node_id] = node_path\n        return processed_node, relationships",
                "node_id": "79a295aa-d499-453b-b4d1-5748a3606332",
                "path": "src.graph_construction.graph_file_parser.GraphFileParser.__process_node__",
                "label": "FUNCTION"
            }
        },
        {
            "id": "6e08bb9b-079a-40f8-8e8f-d3abc5b5e5a1",
            "properties": {
                "name": "_get_imports",
                "signature": "def _get_imports(self, path: str, file_node_id: str) -> dict:",
                "text": "def _get_imports(self, path: str, file_node_id: str) -> dict:\n        parser = tree_sitter_languages.get_parser(\"python\")\n        with open(path, \"r\") as file:\n            code = file.read()\n        tree = parser.parse(bytes(code, \"utf-8\"))\n\n        imports = {}\n        for node in tree.root_node.children:\n            if node.type == \"import_from_statement\":\n                import_statements = node.named_children\n\n                from_statement = import_statements[0]\n                from_text = from_statement.text.decode()\n                for import_statement in import_statements[1:]:\n                    imports[import_statement.text.decode()] = (\n                        tree_parser.resolve_import_path(from_text, path, self.root_path)\n                    )\n\n            elif node.type == \"import_statement\":\n                import_statement = node.named_children[0]\n                imports[\"global\"] = import_statement.text.decode()\n\n        return {file_node_id: imports}",
                "node_id": "d6134f8a-7e7d-47d5-8a33-70eb561a036e",
                "path": "src.graph_construction.graph_file_parser.GraphFileParser._get_imports",
                "label": "FUNCTION"
            }
        },
        {
            "id": "c1235b50-5505-49df-90ae-5242e81410dd",
            "properties": {
                "path": "src/graph_construction/__init__.py",
                "name": "__init__.py",
                "node_id": "88f25ccf-0d7a-449e-8dc8-235d1ebedcd7",
                "label": "FILE"
            }
        },
        {
            "id": "f719c326-709a-4bee-9f24-f8284092195c",
            "properties": {
                "text": "import os\nimport uuid\nfrom pathlib import Path\nimport tree_sitter_languages\nfrom llama_index.core import SimpleDirectoryReader\nfrom llama_index.core.schema import NodeRelationship, BaseNode\nfrom llama_index.core.text_splitter import CodeSplitter\nfrom llama_index.packs.code_hierarchy import CodeHierarchyNodeParser\nfrom utils import format_nodes, tree_parser\n\nclass GraphConstructor:\n    # Code replaced for brevity. See node_id 71bb0d1a-0f91-4858-9e38-10342a61ea8a",
                "node_id": "e3af0fc1-2393-4220-a539-e35347e3d58a",
                "path": "src.graph_construction.graph_builder",
                "directory": "src/graph_construction/",
                "name": "graph_builder.py",
                "label": "FILE_ROOT"
            }
        },
        {
            "id": "68d89add-fa64-4e5f-a6ba-aea29f009761",
            "properties": {
                "name": "GraphConstructor",
                "signature": "class GraphConstructor:",
                "text": "class GraphConstructor:\n    RELATIONS_TYPES_MAP = {\n        \"function_definition\": \"FUNCTION_DEFINITION\",\n        \"class_definition\": \"CLASS_DEFINITION\",\n    }\n\n    def __init__(self, graph_manager):\n        # Code replaced for brevity. See node_id 8e343c22-cca8-4e11-b20e-62b73a62c942\n\n    def _process_file(self, file_path, language, directory_path):\n        # Code replaced for brevity. See node_id fb05a31b-8a91-4e57-b6a0-7b68d22de22b\n\n    def __process_node__(self, node: BaseNode, no_extension_path: str):\n        # Code replaced for brevity. See node_id 4844717b-db42-47d2-93c2-80110ff23a1a\n\n    def _scan_directory(\n        self,\n        path,\n        language=\"python\",\n        nodes=[],\n        relationships=[],\n        parent_id=None,\n    ):\n        # Code replaced for brevity. See node_id 085cbeab-83fe-4b17-a23c-99db83cf33aa\n\n    def _relate_imports(self, node_list):\n        # Code replaced for brevity. See node_id 1c25bac1-0111-490f-aac2-056fe50cde8e\n\n\n    def _get_imports(self, path):\n        # Code replaced for brevity. See node_id 0b36dc6e-0c09-4294-bb69-4caba7b97f91\n\n    def _relate_function_calls(self, node_list):\n        # Code replaced for brevity. See node_id 340cbc41-f71b-42bc-b6bc-c19844cabf99\n\n    def build_graph(self, path, language):\n\n        # process every node to create the graph structure\n        # Code replaced for brevity. See node_id 7d1baa14-4ef5-4f31-b626-e7dffb69abe2",
                "node_id": "71bb0d1a-0f91-4858-9e38-10342a61ea8a",
                "path": "src.graph_construction.graph_builder.GraphConstructor",
                "label": "CLASS"
            }
        },
        {
            "id": "cc916c98-5c79-4728-bd9d-f3f88754a5f7",
            "properties": {
                "name": "__init__",
                "signature": "def __init__(self, graph_manager):",
                "text": "def __init__(self, graph_manager):\n        self.graph_manager = graph_manager\n        self.directories_map = {}\n        self.visited_nodes = {}\n        self.global_imports = {}\n        self.root = None",
                "node_id": "8e343c22-cca8-4e11-b20e-62b73a62c942",
                "function_calls": [],
                "path": "src.graph_construction.graph_builder.GraphConstructor.__init__",
                "label": "FUNCTION"
            }
        },
        {
            "id": "eb22a818-affb-450c-98af-7c803037b409",
            "properties": {
                "name": "_process_file",
                "signature": "def _process_file(self, file_path, language, directory_path):",
                "text": "def _process_file(self, file_path, language, directory_path):\n        path = Path(file_path)\n        if not path.exists():\n            print(f\"File {file_path} does not exist.\")\n            return\n        documents = SimpleDirectoryReader(\n            input_files=[path],\n            file_metadata=lambda x: {\"filepath\": x},\n        ).load_data()\n\n        code = CodeHierarchyNodeParser(\n            language=language,\n            chunk_min_characters=3,\n            code_splitter=CodeSplitter(\n                language=language, max_chars=10000, chunk_lines=10\n            ),\n        )\n        no_extension_path = file_path.replace(\".py\", \"\")\n\n        split_nodes = code.get_nodes_from_documents(documents)\n        node_list = []\n        edges_list = []\n        for node in split_nodes:\n            processed_node, relationships = self.__process_node__(node, no_extension_path)\n            node_list.append(processed_node)\n            edges_list.extend(relationships)\n        imports, _ = self._get_imports(path)\n\n        node_list[0][\"attributes\"][\"directory\"] = directory_path\n        node_list[0][\"imports\"] = imports\n        node_list[0][\"attributes\"][\"name\"] = os.path.basename(file_path)\n\n        return node_list, edges_list",
                "node_id": "fb05a31b-8a91-4e57-b6a0-7b68d22de22b",
                "path": "src.graph_construction.graph_builder.GraphConstructor._process_file",
                "label": "FUNCTION"
            }
        },
        {
            "id": "33027659-04f2-4484-80de-fb9d3b2ac5cb",
            "properties": {
                "name": "__process_node__",
                "signature": "def __process_node__(self, node: BaseNode, no_extension_path: str):",
                "text": "def __process_node__(self, node: BaseNode, no_extension_path: str):\n        relationships = []\n        scope = (\n            node.metadata[\"inclusive_scopes\"][-1]\n            if node.metadata[\"inclusive_scopes\"]\n            else None\n        )\n        type_node = \"file\"\n        if scope:\n            type_node = scope[\"type\"]\n\n        if type_node == \"function_definition\":\n            function_calls = tree_parser.get_function_calls(node)\n            processed_node = format_nodes.format_function_node(\n                node, scope, function_calls\n            )\n        elif type_node == \"class_definition\":\n            processed_node = format_nodes.format_class_node(node, scope)\n        else:\n            processed_node = format_nodes.format_file_node(node)\n\n        for relation in node.relationships.items():\n            if relation[0] == NodeRelationship.CHILD:\n                for child in relation[1]:\n                    relation_type = (\n                        child.metadata[\"inclusive_scopes\"][-1][\"type\"]\n                        if child.metadata[\"inclusive_scopes\"]\n                        else \"\"\n                    )\n                    relationships.append(\n                        {\n                            \"sourceId\": node.node_id,\n                            \"targetId\": child.node_id,\n                            \"type\": self.RELATIONS_TYPES_MAP.get(\n                                relation_type, \"UNKNOWN\"\n                            ),\n                        }\n                    )\n            elif relation[0] == NodeRelationship.PARENT:\n                if relation[1]:\n                    parent_path = self.visited_nodes.get(relation[1].node_id, no_extension_path).replace(\"/\", \".\")\n                    node_path = f\"{parent_path}.{processed_node['attributes']['name']}\"\n                else:\n                    node_path = no_extension_path.replace(\"/\", \".\")\n        processed_node['attributes'][\"path\"] = node_path\n        self.global_imports[node_path] = node.node_id\n        self.visited_nodes[node.node_id] = node_path\n        return processed_node, relationships",
                "node_id": "4844717b-db42-47d2-93c2-80110ff23a1a",
                "path": "src.graph_construction.graph_builder.GraphConstructor.__process_node__",
                "label": "FUNCTION"
            }
        },
        {
            "id": "15a1603c-483a-4ac7-b151-9ea9b1e4490c",
            "properties": {
                "name": "_scan_directory",
                "signature": "def _scan_directory(\n        self,\n        path,\n        language=\"python\",\n        nodes=[],\n        relationships=[],\n        parent_id=None,\n    ):",
                "text": "def _scan_directory(\n        self,\n        path,\n        language=\"python\",\n        nodes=[],\n        relationships=[],\n        parent_id=None,\n    ):\n        if self.root is None:\n            self.root = path\n        package = False\n        init_py_path = os.path.join(path, \"__init__.py\")\n        if os.path.exists(init_py_path):\n            package = True\n\n        directory_node = format_nodes.format_directory_node(path, package)\n        directory_path = directory_node[\"attributes\"][\"path\"]\n        directory_node_id = directory_node[\"attributes\"][\"node_id\"]\n\n        if parent_id is not None:\n            relationships.append(\n                {\n                    \"sourceId\": parent_id,\n                    \"targetId\": directory_node_id,\n                    \"type\": \"contains\",\n                }\n            )\n\n        nodes.append(directory_node)\n        for entry in os.scandir(path):\n            if entry.is_file():\n                if entry.name.endswith(\".py\") and not entry.name == (\"__init__.py\"):\n                    entry_name = entry.name.split(\".py\")[0]\n                    processed_nodes, relations = self._process_file(\n                        entry.path, language, directory_node[\"attributes\"][\"path\"]\n                    )\n                    file_root_node_id = processed_nodes[0][\"attributes\"][\"node_id\"]\n\n                    nodes.extend(processed_nodes)\n                    relationships.extend(relations)\n                    relationships.append(\n                        {\n                            \"sourceId\": directory_node_id,\n                            \"targetId\": file_root_node_id,\n                            \"type\": \"contains\",\n                        }\n                    )\n                    global_import_key = (directory_path + entry_name).replace(\"/\", \".\")\n                    self.global_imports[global_import_key] = file_root_node_id\n                else:\n                    file_node = {\n                        \"type\": \"FILE\",\n                        \"attributes\": {\n                            \"path\": entry.path,\n                            \"name\": entry.name,\n                            \"node_id\": str(uuid.uuid4()),\n                        },\n                    }\n                    nodes.append(file_node)\n                    relationships.append(\n                        {\n                            \"sourceId\": directory_node_id,\n                            \"targetId\": file_node[\"attributes\"][\"node_id\"],\n                            \"type\": \"CONTAINS\",\n                        }\n                    )\n            if entry.is_dir():\n                nodes, relationships = self._scan_directory(\n                    entry.path,\n                    language,\n                    nodes,\n                    relationships,\n                    directory_node_id,\n                )\n        return nodes, relationships",
                "node_id": "085cbeab-83fe-4b17-a23c-99db83cf33aa",
                "path": "src.graph_construction.graph_builder.GraphConstructor._scan_directory",
                "label": "FUNCTION"
            }
        },
        {
            "id": "1c587f0d-26e1-45eb-986d-4a0dd84d5741",
            "properties": {
                "name": "_relate_imports",
                "signature": "def _relate_imports(self, node_list):",
                "text": "def _relate_imports(self, node_list):\n        import_edges = []\n        for node in node_list:\n            if node.get(\"imports\") is not None:\n                for imp in node[\"imports\"]:\n                    for key in self.global_imports.keys():\n                        if key.endswith(imp):\n                            import_edges.append(\n                                {\n                                    \"sourceId\": node[\"attributes\"][\"node_id\"],\n                                    \"targetId\": self.global_imports[key],\n                                    \"type\": \"IMPORTS\",\n                                }\n                            )\n                            print(\"added edge\", key)\n                del node[\"imports\"]\n\n        return import_edges",
                "node_id": "1c25bac1-0111-490f-aac2-056fe50cde8e",
                "path": "src.graph_construction.graph_builder.GraphConstructor._relate_imports",
                "label": "FUNCTION"
            }
        },
        {
            "id": "12d3cf5b-b0bc-4208-8fbe-769373640232",
            "properties": {
                "name": "_get_imports",
                "signature": "def _get_imports(self, path):",
                "text": "def _get_imports(self, path):\n        parser = tree_sitter_languages.get_parser(\"python\")\n        with open(path, \"r\") as file:\n            code = file.read()\n        tree = parser.parse(bytes(code, \"utf-8\"))\n\n        imports = set()\n        relative_imports = set()\n        for node in tree.root_node.children:\n            if node.type == \"import_from_statement\":\n                from_import = \"\"\n                for child in node.children:\n                    if not from_import:\n                        if child.type == \"dotted_name\":\n                            from_import = child.text.decode()\n                        elif child.type == \"relative_import\":\n                            relative_imports.add(child.text.decode())\n                            from_import = child.text.decode()\n\n                    else:\n                        if child.type == \"dotted_name\":\n                            imports.add(f\"{from_import}.{child.text.decode()}\")\n\n            elif node.type == \"import_statement\":\n                for child in node.children:\n                    if child.type == \"dotted_name\":\n                        imports.add(child.text.decode())\n        return imports, relative_imports",
                "node_id": "0b36dc6e-0c09-4294-bb69-4caba7b97f91",
                "path": "src.graph_construction.graph_builder.GraphConstructor._get_imports",
                "label": "FUNCTION"
            }
        },
        {
            "id": "9207bd9b-9723-4f47-9184-ee911ed7b93b",
            "properties": {
                "name": "_relate_function_calls",
                "signature": "def _relate_function_calls(self, node_list):",
                "text": "def _relate_function_calls(self, node_list):\n        function_calls_relations = []\n        for node in node_list:\n            function_calls = node[\"attributes\"].get(\"function_calls\")\n            if function_calls:\n                for call in function_calls:\n                    for key in self.global_imports.keys():\n                        if key.endswith(call):\n                            function_calls_relations.append(\n                                {\n                                    \"sourceId\": node[\"attributes\"][\"node_id\"],\n                                    \"targetId\": self.global_imports[key],\n                                    \"type\": \"CALLS\",\n                                }\n                            )\n                            print(\"added edge\", call)\n                del node[\"attributes\"][\"function_calls\"]\n\n        return function_calls_relations",
                "node_id": "340cbc41-f71b-42bc-b6bc-c19844cabf99",
                "path": "src.graph_construction.graph_builder.GraphConstructor._relate_function_calls",
                "label": "FUNCTION"
            }
        },
        {
            "id": "7d94e52d-1973-45d1-9565-62e5f972f645",
            "properties": {
                "name": "build_graph",
                "signature": "def build_graph(self, path, language):\n\n        # process every node to create the graph structure",
                "text": "def build_graph(self, path, language):\n\n        # process every node to create the graph structure\n        nodes, relationships = self._scan_directory(path, language)\n        # relate imports between file nodes\n        relationships.extend(self._relate_imports(nodes))\n        # relate functions calls\n        relationships.extend(self._relate_function_calls(nodes))\n\n        self.graph_manager.save_graph(nodes, relationships)",
                "node_id": "7d1baa14-4ef5-4f31-b626-e7dffb69abe2",
                "path": "src.graph_construction.graph_builder.GraphConstructor.build_graph",
                "label": "FUNCTION"
            }
        },
        {
            "id": "769b3a16-e0bf-4059-9fb3-54559f9acc8b",
            "properties": {
                "path": "src/utils/",
                "name": "utils",
                "node_id": "<function uuid4 at 0x707d38482c20>",
                "label": "PACKAGE"
            }
        },
        {
            "id": "ab38b01c-1a29-4cfe-9a9d-6ce28f392f9d",
            "properties": {
                "path": "src/utils/__pycache__/",
                "name": "__pycache__",
                "node_id": "<function uuid4 at 0x707d38482c20>",
                "label": "FOLDER"
            }
        },
        {
            "id": "c8fe2ce7-3df7-4757-9e5a-32e4e8eedf48",
            "properties": {
                "path": "src/utils/__pycache__/__init__.cpython-310.pyc",
                "name": "__init__.cpython-310.pyc",
                "node_id": "394dbb3d-68ea-47ed-bb9d-405e5b2a7b00",
                "label": "FILE"
            }
        },
        {
            "id": "f4c3fd8c-71be-41ca-b20b-7c8343a688f8",
            "properties": {
                "path": "src/utils/__pycache__/tree_parser.cpython-310.pyc",
                "name": "tree_parser.cpython-310.pyc",
                "node_id": "0aa3c722-fa04-4ba0-a5b5-cd2f4a3fb17f",
                "label": "FILE"
            }
        },
        {
            "id": "03faa244-1bbf-4255-b398-9d8a49892f0b",
            "properties": {
                "path": "src/utils/__pycache__/format_nodes.cpython-310.pyc",
                "name": "format_nodes.cpython-310.pyc",
                "node_id": "30bde3fa-bef4-4d2c-9554-42961a7326a0",
                "label": "FILE"
            }
        },
        {
            "id": "d924f711-4f77-4ccb-968e-5f203a5c4b46",
            "properties": {
                "text": "LANGUAGE_EXTENSIONS = {\n    \"Python\": [\".py\", \".pyc\", \".pyd\", \".pyo\", \".pyw\", \".pyx\"],\n    \"C\": [\".c\", \".h\"],\n    \"C++\": [\".cpp\", \".cc\", \".cxx\", \".hpp\", \".h\", \".hxx\"],\n    \"Java\": [\".java\", \".jar\"],\n    \"JavaScript\": [\".js\"],\n    \"HTML\": [\".html\", \".htm\"],\n    \"CSS\": [\".css\"],\n    \"PHP\": [\".php\"],\n    \"Ruby\": [\".rb\"],\n    \"Swift\": [\".swift\"],\n    \"Kotlin\": [\".kt\", \".kts\"],\n    \"Go\": [\".go\"],\n    \"Rust\": [\".rs\"],\n    \"SQL\": [\".sql\"],\n    \"Shell\": [\".sh\"],\n    \"Perl\": [\".pl\"],\n    \"Scala\": [\".scala\"],\n    \"TypeScript\": [\".ts\"],\n    \"Lua\": [\".lua\"],\n    \"C#\": [\".cs\"],\n    \"Objective-C\": [\".m\"],\n    \"R\": [\".r\"],\n    \"Dart\": [\".dart\"],\n    \"Haskell\": [\".hs\"],\n    \"Julia\": [\".jl\"],\n    \"MATLAB\": [\".m\"],\n    \"Erlang\": [\".erl\"],\n    \"Groovy\": [\".groovy\"],\n    \"Clojure\": [\".clj\", \".cljs\"],\n    \"F#\": [\".fs\", \".fsx\"],\n    \"VBA\": [\".vba\"],\n    \"VBScript\": [\".vbs\"],\n    \"TeX\": [\".tex\"],\n    \"Assembly\": [\".asm\", \".s\"],\n    \"OCaml\": [\".ml\", \".mli\"],\n    \"ActionScript\": [\".as\"],\n    \"Pascal\": [\".pas\"],\n    \"Scheme\": [\".scm\", \".ss\"],\n    \"D\": [\".d\"],\n    \"Ada\": [\".ada\", \".adb\", \".ads\"],\n    \"Prolog\": [\".pl\", \".pro\"],\n    \"COBOL\": [\".cob\", \".cbl\"],\n    \"Forth\": [\".forth\", \".fth\", \".fs\"],\n    \"Verilog\": [\".v\", \".vh\", \".sv\", \".svh\"],\n    \"VHDL\": [\".vhd\", \".vhdl\"],\n    \"Lisp\": [\".lisp\", \".lsp\"],\n    \"Smalltalk\": [\".st\"],\n    \"Fortran\": [\".f\", \".for\", \".f90\", \".f95\"],\n    \"PowerShell\": [\".ps1\"],\n    \"Elixir\": [\".ex\", \".exs\"],\n    \"Ada\": [\".ada\", \".adb\", \".ads\"],\n    \"ABAP\": [\".abap\"],\n    \"Batch\": [\".bat\", \".cmd\"],\n    \"CMake\": [\".cmake\"],\n    \"CoffeeScript\": [\".coffee\"],\n    \"Crystal\": [\".cr\"],\n    \"Dylan\": [\".dylan\", \".dyl\", \".intr\", \".lid\"],\n    \"Eiffel\": [\".e\"],\n    \"Elm\": [\".elm\"],\n    \"Erlang\": [\".erl\", \".hrl\"],\n    \"F#\": [\".fs\", \".fsi\", \".fsx\", \".fsscript\"],\n    \"Forth\": [\".fth\", \".4th\", \".f\"],\n    \"Freemarker\": [\".ftl\"],\n    \"Fortran\": [\".f90\", \".f95\", \".f03\", \".f08\"],\n    \"GDScript\": [\".gd\"],\n    \"Gosu\": [\".gs\"],\n    \"GraphQL\": [\".graphql\", \".gql\"],\n    \"Groovy\": [\".groovy\", \".grt\", \".gtpl\", \".gvy\"],\n    \"HTML\": [\".html\", \".htm\", \".shtml\"],\n    \"IDL\": [\".idl\"],\n    \"Idris\": [\".idr\", \".lidr\"],\n    \"JSON\": [\".json\"],\n    \"Java\": [\".java\", \".properties\", \".jsp\", \".jspx\", \".wss\", \".wssx\"],\n    \"Kotlin\": [\".kt\", \".kts\", \".ktm\", \".ktt\"],\n    \"LLVM\": [\".ll\"],\n    \"Lasso\": [\".lasso\", \".lasso8\", \".las\", \".lasso9\", \".ldml\"],\n    \"MATLAB\": [\".m\"],\n    \"Makefile\": [\".mk\", \".mak\", \".make\", \".mkfile\"],\n    \"Markdown\": [\".md\", \".markdown\", \".mkd\"],\n    \"Max\": [\".maxpat\", \".maxhelp\", \".maxproj\", \".maxpresets\", \".mxt\"],\n    \"Nim\": [\".nim\", \".nimble\"],\n    \"Nix\": [\".nix\"],\n    \"OCaml\": [\".ml\", \".mli\", \".mll\", \".mly\"],\n    \"Objective-C\": [\".m\", \".h\"],\n    \"OpenEdge\": [\".p\"],\n    \"Pascal\": [\".pas\", \".p\"],\n    \"Perl\": [\".pl\", \".pm\", \".t\"],\n    \"PHP\": [\".php\", \".phpt\", \".php3\", \".php4\", \".php5\", \".phps\", \".phtml\"],\n    \"PLSQL\": [\".plsql\", \".pck\", \".pkb\", \".pks\"],\n    \"Pascal\": [\".pas\", \".pp\", \".dpr\", \".dfm\", \".lpr\", \".lpk\"],\n    \"Pawn\": [\".p\", \".pwn\"],\n    \"PureScript\": [\".purs\"],\n    \"Python\": [\".py\", \".pyw\", \".pyc\", \".pyd\"],\n    \"QML\": [\".qml\", \".qbs\", \".qbsqmldir\"],\n    \"Racket\": [\".rkt\", \".rktl\", \".scrbl\"],\n    \"Reason\": [\".re\"],\n    \"Red\": [\".red\", \".reds\"],\n    \"Regular\": [\".regex\", \".regexp\", \".rg\", \".rpl\", \".re\"],\n    \"Ring\": [\".ring\"],\n    \"Ruby\": [\".rb\", \".rhtml\", \".rjs\", \".gemspec\", \".podspec\", \".thor\", \".irbrc\", \".capfile\", \".gemrc\", \".ru\", \".prawn\", \".prawnx\"],\n    \"Rust\": [\".rs\", \".rlib\", \".toml\"],\n    \"SQL\": [\".sql\", \".ddl\", \".dml\", \".dcl\", \".dtl\", \".sqlj\"],\n    \"Scala\": [\".scala\", \".sc\"],\n    \"Shell\": [\".sh\", \".bash\", \".zsh\", \".fish\"],\n    \"Solidity\": [\".sol\"],\n    \"Standard\": [\".stg\"],\n    \"Stylus\": [\".styl\"],\n    \"SuperCollider\": [\".sc\", \".scd\"],\n    \"Swift\": [\".swift\"],\n    \"TeX\": [\".tex\"],\n    \"Toml\": [\".toml\"],\n    \"TypeScript\": [\".ts\", \".tsx\"]}",
                "node_id": "7c5515d0-7abd-4c4b-9db8-142b2046140d",
                "path": "src.utils.language_extensions",
                "directory": "src/utils/",
                "name": "language_extensions.py",
                "label": "FILE_ROOT"
            }
        },
        {
            "id": "8b7f4c7d-1222-4e8a-a589-bdef7e3c3650",
            "properties": {
                "text": "from llama_index.core.schema import BaseNode\nimport os\nimport uuid\n\n\ndef format_function_node(\n    node: BaseNode, scope: dict, function_calls: list[str]\n) -> dict:\n    # Code replaced for brevity. See node_id 8caa9f56-bb29-4e98-9f67-a01d8bf3ea7f\n\n\ndef format_class_node(node: BaseNode, scope: dict) -> dict:\n    # Code replaced for brevity. See node_id a273152e-5011-4e5d-8a0e-41f0d7118399\n\n\ndef format_file_node(node: BaseNode) -> dict:\n    # Code replaced for brevity. See node_id c01f081e-628d-4ae3-8bb7-0a371d92cadd\n\n\ndef format_directory_node(path: str, package: bool) -> dict:\n    # Code replaced for brevity. See node_id 22b066f5-2874-4d00-9a87-f7b19aec4271",
                "node_id": "b6742ab1-9170-47b0-a1ac-0c2464e67a49",
                "path": "src.utils.format_nodes",
                "directory": "src/utils/",
                "name": "format_nodes.py",
                "label": "FILE_ROOT"
            }
        },
        {
            "id": "807b7dee-bee8-46d6-88df-45bd822a5883",
            "properties": {
                "name": "format_function_node",
                "signature": "def format_function_node(\n    node: BaseNode, scope: dict, function_calls: list[str]\n) -> dict:",
                "text": "def format_function_node(\n    node: BaseNode, scope: dict, function_calls: list[str]\n) -> dict:\n    name = scope[\"name\"]\n    signature = scope[\"signature\"]\n\n    processed_node = {\n        \"type\": \"FUNCTION\",\n        \"attributes\": {\n            \"name\": name,\n            \"signature\": signature,\n            \"text\": node.text,\n            \"node_id\": node.node_id,\n            \"function_calls\": function_calls,\n        },\n    }\n\n    return processed_node",
                "node_id": "8caa9f56-bb29-4e98-9f67-a01d8bf3ea7f",
                "function_calls": [],
                "path": "src.utils.format_nodes.format_function_node",
                "label": "FUNCTION"
            }
        },
        {
            "id": "d6cb28e3-a74f-4a18-bbd9-60e2d941fd44",
            "properties": {
                "name": "format_class_node",
                "signature": "def format_class_node(node: BaseNode, scope: dict) -> dict:",
                "text": "def format_class_node(node: BaseNode, scope: dict) -> dict:\n    name = scope[\"name\"]\n    signature = scope[\"signature\"]\n\n    processed_node = {\n        \"type\": \"CLASS\",\n        \"attributes\": {\n            \"name\": name,\n            \"signature\": signature,\n            \"text\": node.text,\n            \"node_id\": node.node_id,\n        },\n    }\n\n    return processed_node",
                "node_id": "a273152e-5011-4e5d-8a0e-41f0d7118399",
                "function_calls": [],
                "path": "src.utils.format_nodes.format_class_node",
                "label": "FUNCTION"
            }
        },
        {
            "id": "a3343a53-68c1-4ff9-8a84-d04acb8f733d",
            "properties": {
                "name": "format_file_node",
                "signature": "def format_file_node(node: BaseNode) -> dict:",
                "text": "def format_file_node(node: BaseNode) -> dict:\n    processed_node = {\n        \"type\": \"FILE_ROOT\",\n        \"attributes\": {\n            \"text\": node.text,\n            \"node_id\": node.node_id,\n        },\n    }\n\n    return processed_node",
                "node_id": "c01f081e-628d-4ae3-8bb7-0a371d92cadd",
                "function_calls": [],
                "path": "src.utils.format_nodes.format_file_node",
                "label": "FUNCTION"
            }
        },
        {
            "id": "8435a6aa-e6db-4d22-b390-237b27713c49",
            "properties": {
                "name": "format_directory_node",
                "signature": "def format_directory_node(path: str, package: bool) -> dict:",
                "text": "def format_directory_node(path: str, package: bool) -> dict:\n    processed_node = {\n        \"attributes\": {\n            \"path\": path + \"/\",\n            \"name\": os.path.basename(path),\n            \"node_id\": str(uuid.uuid4),\n        },\n        \"type\": \"PACKAGE\" if package else \"FOLDER\",\n    }\n\n    return processed_node",
                "node_id": "22b066f5-2874-4d00-9a87-f7b19aec4271",
                "path": "src.utils.format_nodes.format_directory_node",
                "label": "FUNCTION"
            }
        },
        {
            "id": "237ac0bc-da84-419d-be98-7733eb47a302",
            "properties": {
                "path": "src/utils/__init__.py",
                "name": "__init__.py",
                "node_id": "084358ee-2314-4b2f-be92-922727897e1f",
                "label": "FILE"
            }
        },
        {
            "id": "3a8f961d-fbe2-4fef-b46c-872f9cb513e6",
            "properties": {
                "text": "import tree_sitter_languages\nimport re\n\n\ndef traverse_tree(tree):\n    # Code replaced for brevity. See node_id 9bf65bc3-9969-4092-9b8d-f8674294b2f9\n\n\ndef count_parameters(params_str):\n    # Count parameters considering string literals and ignoring commas within them.\n    # This simplistic approach assumes balanced quotes and no escaped quotes within strings.\n    # Code replaced for brevity. See node_id e238350b-3d03-46c9-a58f-d327a659ce38\n\n\ndef parse_function_call(func_call_bytes: bytes, inclusive_scopes) -> tuple[str, int]:\n    # Regular expression to match a single function call.\n    # It captures the function name and its parameters.\n    # Code replaced for brevity. See node_id 15253f28-222c-44e6-9ba1-9d2c2371c72a\n\n\ndef get_function_calls(node) -> list[str]:\n    # Code replaced for brevity. See node_id 6f01804a-b584-4a3a-89ff-0e3b6b76ef46",
                "node_id": "a8c4062f-6054-4db8-a18a-0a2dbac9c055",
                "path": "src.utils.tree_parser",
                "directory": "src/utils/",
                "name": "tree_parser.py",
                "label": "FILE_ROOT"
            }
        },
        {
            "id": "f1d3aeee-f58f-47ae-a0ea-d8b762cf2c5e",
            "properties": {
                "name": "traverse_tree",
                "signature": "def traverse_tree(tree):",
                "text": "def traverse_tree(tree):\n    cursor = tree.walk()\n    visited_children = False\n    while True:\n        if not visited_children:\n            yield cursor.node\n            if not cursor.goto_first_child():\n                visited_children = True\n        elif cursor.goto_next_sibling():\n            visited_children = False\n        elif not cursor.goto_parent():\n            break",
                "node_id": "9bf65bc3-9969-4092-9b8d-f8674294b2f9",
                "path": "src.utils.tree_parser.traverse_tree",
                "label": "FUNCTION"
            }
        },
        {
            "id": "54f495f3-013f-4620-9adb-b08c0555de64",
            "properties": {
                "name": "count_parameters",
                "signature": "def count_parameters(params_str):\n    # Count parameters considering string literals and ignoring commas within them.\n    # This simplistic approach assumes balanced quotes and no escaped quotes within strings.",
                "text": "def count_parameters(params_str):\n    # Count parameters considering string literals and ignoring commas within them.\n    # This simplistic approach assumes balanced quotes and no escaped quotes within strings.\n    in_string = False\n    param_count = (\n        0 if not params_str else 1\n    )  # Start with 1 parameter if the string is not empty\n\n    for char in params_str:\n        if char == '\"':\n            in_string = not in_string  # Toggle state\n        elif char == \",\" and not in_string:\n            param_count += (\n                1  # Count commas outside of string literals as parameter separators\n            )\n\n    # Edge case for empty parameter list or only spaces\n    if param_count == 1 and not params_str.strip():\n        return 0\n\n    return param_count",
                "node_id": "e238350b-3d03-46c9-a58f-d327a659ce38",
                "path": "src.utils.tree_parser.count_parameters",
                "label": "FUNCTION"
            }
        },
        {
            "id": "6bda4a13-a21a-44ff-aceb-9b8382b83ed5",
            "properties": {
                "name": "parse_function_call",
                "signature": "def parse_function_call(func_call_bytes: bytes, inclusive_scopes) -> tuple[str, int]:\n    # Regular expression to match a single function call.\n    # It captures the function name and its parameters.",
                "text": "def parse_function_call(func_call_bytes: bytes, inclusive_scopes) -> tuple[str, int]:\n    # Regular expression to match a single function call.\n    # It captures the function name and its parameters.\n    pattern = re.compile(r\"^([\\w\\.]+)\\(([^)]*)\\)$\")\n\n    func_call_str = func_call_bytes.decode(\"utf-8\")\n    match = pattern.match(func_call_str)\n    if match:\n        func_name = match.group(1)  # The function name\n        params_str = match.group(2)  # The parameters as a single string\n\n        num_params = count_parameters(params_str)\n        if \"self.\" in func_name:\n            for parent in reversed(inclusive_scopes[:-1]):\n                if parent[\"type\"] == \"class_definition\":\n                    func_name = func_name.replace(\"self.\", parent[\"name\"] + \".\")\n                    break\n\n        return func_name, num_params\n    else:\n        return None, None",
                "node_id": "15253f28-222c-44e6-9ba1-9d2c2371c72a",
                "path": "src.utils.tree_parser.parse_function_call",
                "label": "FUNCTION"
            }
        },
        {
            "id": "75cfefac-8659-4a9c-ba00-965650389663",
            "properties": {
                "name": "get_function_calls",
                "signature": "def get_function_calls(node) -> list[str]:",
                "text": "def get_function_calls(node) -> list[str]:\n    code_text = node.text\n\n    parser = tree_sitter_languages.get_parser(\"python\")\n    tree = parser.parse(bytes(code_text, \"utf-8\"))\n    node_names = map(lambda node: node, traverse_tree(tree))\n    function_calls = []\n    for tree_node in node_names:\n        if tree_node.type == \"call\":\n            function_calls.append(tree_node.text)\n\n    parsed_function_calls = map(\n        lambda x: parse_function_call(x, node.metadata[\"inclusive_scopes\"]),\n        function_calls,\n    )\n    \n\n    file_path = node.metadata[\"filepath\"].replace(\".py\", \"\").replace(\"/\", \".\")\n    filtered_calls = filter(lambda x: x[0] is not None, parsed_function_calls)\n    return list(map(lambda x: x[0], filtered_calls))",
                "node_id": "6f01804a-b584-4a3a-89ff-0e3b6b76ef46",
                "path": "src.utils.tree_parser.get_function_calls",
                "label": "FUNCTION"
            }
        }
    ],
    "edges": [
        {
            "id": "947afd3e-3958-48ec-bf20-dd97f8290de5",
            "start": "ab38b01c-1a29-4cfe-9a9d-6ce28f392f9d",
            "end": "e02dd498-544e-42f0-8a86-2ed23663b5fa",
            "properties": {
                "label": "contains"
            }
        },
        {
            "id": "f4f67e19-6a9f-4258-9d06-d225c1c02c92",
            "start": "ab38b01c-1a29-4cfe-9a9d-6ce28f392f9d",
            "end": "0a580f9d-ffea-4905-a4c7-75f6eca2035d",
            "properties": {
                "label": "CONTAINS"
            }
        },
        {
            "id": "22df47f7-3d78-4d88-943a-202dc4a07917",
            "start": "ab38b01c-1a29-4cfe-9a9d-6ce28f392f9d",
            "end": "ab38b01c-1a29-4cfe-9a9d-6ce28f392f9d",
            "properties": {
                "label": "contains"
            }
        },
        {
            "id": "f87eb753-c60c-4b5c-8bb2-8844d4f913bc",
            "start": "6dbf0839-8e95-45ce-b1bf-933cc3c74d77",
            "end": "a34fafde-541a-48ac-9bba-a26a536d380d",
            "properties": {
                "label": "CLASS_DEFINITION"
            }
        },
        {
            "id": "b95eadb2-8e86-49e6-a034-b8f4abf096ee",
            "start": "a34fafde-541a-48ac-9bba-a26a536d380d",
            "end": "9b5cc1e6-2f86-49ef-a0c5-78cb617f6ed0",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "4891c56a-cbed-406d-bde1-69f3782baf69",
            "start": "a34fafde-541a-48ac-9bba-a26a536d380d",
            "end": "21d76bb9-97b2-4cd6-9d69-5d2c009c1254",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "365bbb8e-6bbd-4e73-b59b-8f88a34f345c",
            "start": "a34fafde-541a-48ac-9bba-a26a536d380d",
            "end": "099479d1-d94f-422a-bc77-38f44ef757e2",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "9847353f-4cfc-44f7-832d-ac79e16446c0",
            "start": "a34fafde-541a-48ac-9bba-a26a536d380d",
            "end": "385a6c22-db5b-4ac1-a614-04266b55de69",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "fd597a34-79bb-4dd4-8dd3-df8d650b6a38",
            "start": "9b5cc1e6-2f86-49ef-a0c5-78cb617f6ed0",
            "end": "23324db8-91c1-43e4-b207-355f9d7cfa4b",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "582e8858-0a8c-442f-b5da-266e5c62ddd8",
            "start": "ab38b01c-1a29-4cfe-9a9d-6ce28f392f9d",
            "end": "6dbf0839-8e95-45ce-b1bf-933cc3c74d77",
            "properties": {
                "label": "contains"
            }
        },
        {
            "id": "d20e1d69-2191-4674-b524-0720b1763e04",
            "start": "ab38b01c-1a29-4cfe-9a9d-6ce28f392f9d",
            "end": "ab38b01c-1a29-4cfe-9a9d-6ce28f392f9d",
            "properties": {
                "label": "contains"
            }
        },
        {
            "id": "aeab6ada-a474-4050-82bc-acb103b0e81d",
            "start": "ab38b01c-1a29-4cfe-9a9d-6ce28f392f9d",
            "end": "ab38b01c-1a29-4cfe-9a9d-6ce28f392f9d",
            "properties": {
                "label": "contains"
            }
        },
        {
            "id": "d13bd73d-2029-4e30-888d-1b58324ad5d2",
            "start": "ab38b01c-1a29-4cfe-9a9d-6ce28f392f9d",
            "end": "ac13bd88-6956-4c56-ada7-3b2e060f3ca8",
            "properties": {
                "label": "CONTAINS"
            }
        },
        {
            "id": "74af3600-31ef-4d74-bfdf-b67f5ef3e97c",
            "start": "ab38b01c-1a29-4cfe-9a9d-6ce28f392f9d",
            "end": "b703c552-c881-4470-9171-fa9788b99f54",
            "properties": {
                "label": "CONTAINS"
            }
        },
        {
            "id": "bb49af71-6fb4-493b-b06c-40106c9fe6a8",
            "start": "ab38b01c-1a29-4cfe-9a9d-6ce28f392f9d",
            "end": "d69c92d7-2267-410c-b9b5-dae243860a68",
            "properties": {
                "label": "CONTAINS"
            }
        },
        {
            "id": "12e982c3-8c3c-4340-89b6-63f4be5eb744",
            "start": "0ea91293-1314-4f47-bc9e-5d6edb66f7b1",
            "end": "ba52d0de-166c-436e-943a-76f0bcf3b2e5",
            "properties": {
                "label": "CLASS_DEFINITION"
            }
        },
        {
            "id": "0ced5ffe-fcac-408c-835b-6d905cb80ea5",
            "start": "ba52d0de-166c-436e-943a-76f0bcf3b2e5",
            "end": "c4c2a72e-6f4f-4231-8ac4-64428e75f51b",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "dd478ae4-b883-4d43-853c-e8e126c36e75",
            "start": "ba52d0de-166c-436e-943a-76f0bcf3b2e5",
            "end": "16e422b4-bc67-4e7c-9501-5e05b40d0e50",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "35d4cb6a-24a4-43ef-97fa-b8a22507dc1a",
            "start": "ba52d0de-166c-436e-943a-76f0bcf3b2e5",
            "end": "af8719a1-eb11-48e3-b2b9-8b2b7cc43fc8",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "6e2fdf5a-c871-41d1-a48f-a3debd73bf00",
            "start": "ba52d0de-166c-436e-943a-76f0bcf3b2e5",
            "end": "138212a6-969b-411d-ace2-70bb1a6bd3d8",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "d3f8a32c-22af-42c5-81a9-a25281f07a69",
            "start": "ab38b01c-1a29-4cfe-9a9d-6ce28f392f9d",
            "end": "0ea91293-1314-4f47-bc9e-5d6edb66f7b1",
            "properties": {
                "label": "contains"
            }
        },
        {
            "id": "8cb0d609-6a6f-47e4-a52b-1f277f2b96f3",
            "start": "71169d16-00d4-45e4-b0ff-b6eb23fef026",
            "end": "f302cbed-c6e8-4307-a6df-dd38d1a73222",
            "properties": {
                "label": "CLASS_DEFINITION"
            }
        },
        {
            "id": "cd5fe2f2-053e-435e-89be-7739ff06eda9",
            "start": "f302cbed-c6e8-4307-a6df-dd38d1a73222",
            "end": "d55d03b9-df1c-48e1-a4c8-c4bbc85e5e5a",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "0a55f0fb-cf1b-4328-9b37-fcfecc535b49",
            "start": "f302cbed-c6e8-4307-a6df-dd38d1a73222",
            "end": "48c3d5fe-774f-4763-b343-18ca1cb9728c",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "34bc52aa-7467-446a-80fe-337848eb224c",
            "start": "f302cbed-c6e8-4307-a6df-dd38d1a73222",
            "end": "363cc239-ce19-47c3-8e50-a49c2eeb780d",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "674667ec-5712-41a5-95d1-eea60f5b0107",
            "start": "f302cbed-c6e8-4307-a6df-dd38d1a73222",
            "end": "6e08bb9b-079a-40f8-8e8f-d3abc5b5e5a1",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "39cccbbb-91ad-4243-898a-8d2a06d4ce58",
            "start": "ab38b01c-1a29-4cfe-9a9d-6ce28f392f9d",
            "end": "71169d16-00d4-45e4-b0ff-b6eb23fef026",
            "properties": {
                "label": "contains"
            }
        },
        {
            "id": "979c8aa2-ffe8-4edb-899a-e454b9545db9",
            "start": "ab38b01c-1a29-4cfe-9a9d-6ce28f392f9d",
            "end": "c1235b50-5505-49df-90ae-5242e81410dd",
            "properties": {
                "label": "CONTAINS"
            }
        },
        {
            "id": "61cc655a-43cb-4c88-95f2-53217181eaa2",
            "start": "f719c326-709a-4bee-9f24-f8284092195c",
            "end": "68d89add-fa64-4e5f-a6ba-aea29f009761",
            "properties": {
                "label": "CLASS_DEFINITION"
            }
        },
        {
            "id": "34f4611b-a5a2-442f-a2b0-faffb3eb9efa",
            "start": "68d89add-fa64-4e5f-a6ba-aea29f009761",
            "end": "cc916c98-5c79-4728-bd9d-f3f88754a5f7",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "ed441948-67ca-44f4-8585-fb009fda14fa",
            "start": "68d89add-fa64-4e5f-a6ba-aea29f009761",
            "end": "eb22a818-affb-450c-98af-7c803037b409",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "e0ec007a-faa9-42c1-9e76-5e953fbbfc27",
            "start": "68d89add-fa64-4e5f-a6ba-aea29f009761",
            "end": "33027659-04f2-4484-80de-fb9d3b2ac5cb",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "dc754b62-c82b-430a-98ad-af4605ac3700",
            "start": "68d89add-fa64-4e5f-a6ba-aea29f009761",
            "end": "15a1603c-483a-4ac7-b151-9ea9b1e4490c",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "2df0ccc3-cb53-473e-a777-c2e60dcb7eb1",
            "start": "68d89add-fa64-4e5f-a6ba-aea29f009761",
            "end": "1c587f0d-26e1-45eb-986d-4a0dd84d5741",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "972047d2-1045-4d73-8a3b-e9d8fbe9aa4e",
            "start": "68d89add-fa64-4e5f-a6ba-aea29f009761",
            "end": "12d3cf5b-b0bc-4208-8fbe-769373640232",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "71c51b8d-ab40-4327-9dd6-be5402ff6f7e",
            "start": "68d89add-fa64-4e5f-a6ba-aea29f009761",
            "end": "9207bd9b-9723-4f47-9184-ee911ed7b93b",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "7fed6a97-78be-434e-97f7-0d037e1e710c",
            "start": "68d89add-fa64-4e5f-a6ba-aea29f009761",
            "end": "7d94e52d-1973-45d1-9565-62e5f972f645",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "ab83a107-0708-4a82-b49a-91d6ac1e3550",
            "start": "ab38b01c-1a29-4cfe-9a9d-6ce28f392f9d",
            "end": "f719c326-709a-4bee-9f24-f8284092195c",
            "properties": {
                "label": "contains"
            }
        },
        {
            "id": "dfefde5a-ba7d-47c7-9df2-c3d96c71acff",
            "start": "ab38b01c-1a29-4cfe-9a9d-6ce28f392f9d",
            "end": "ab38b01c-1a29-4cfe-9a9d-6ce28f392f9d",
            "properties": {
                "label": "contains"
            }
        },
        {
            "id": "118f4495-359b-48a6-ac71-090adf5c824c",
            "start": "ab38b01c-1a29-4cfe-9a9d-6ce28f392f9d",
            "end": "ab38b01c-1a29-4cfe-9a9d-6ce28f392f9d",
            "properties": {
                "label": "contains"
            }
        },
        {
            "id": "6cb48d2d-1b35-4a41-9e98-415202509a73",
            "start": "ab38b01c-1a29-4cfe-9a9d-6ce28f392f9d",
            "end": "c8fe2ce7-3df7-4757-9e5a-32e4e8eedf48",
            "properties": {
                "label": "CONTAINS"
            }
        },
        {
            "id": "f037e06f-0161-40fd-b2d7-0c90464ec1cd",
            "start": "ab38b01c-1a29-4cfe-9a9d-6ce28f392f9d",
            "end": "f4c3fd8c-71be-41ca-b20b-7c8343a688f8",
            "properties": {
                "label": "CONTAINS"
            }
        },
        {
            "id": "929ecd28-f040-484e-a01e-5a8ad84221b7",
            "start": "ab38b01c-1a29-4cfe-9a9d-6ce28f392f9d",
            "end": "03faa244-1bbf-4255-b398-9d8a49892f0b",
            "properties": {
                "label": "CONTAINS"
            }
        },
        {
            "id": "6592b96f-912b-4115-8eba-9287dfa0bef9",
            "start": "ab38b01c-1a29-4cfe-9a9d-6ce28f392f9d",
            "end": "d924f711-4f77-4ccb-968e-5f203a5c4b46",
            "properties": {
                "label": "contains"
            }
        },
        {
            "id": "f8006323-6156-4a83-9095-79a439b24842",
            "start": "8b7f4c7d-1222-4e8a-a589-bdef7e3c3650",
            "end": "807b7dee-bee8-46d6-88df-45bd822a5883",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "76b7ec5e-680a-49c1-946f-873202729848",
            "start": "8b7f4c7d-1222-4e8a-a589-bdef7e3c3650",
            "end": "d6cb28e3-a74f-4a18-bbd9-60e2d941fd44",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "a1bc2249-56d9-4fae-81ad-74b88e87ea63",
            "start": "8b7f4c7d-1222-4e8a-a589-bdef7e3c3650",
            "end": "a3343a53-68c1-4ff9-8a84-d04acb8f733d",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "ddc6c635-e73e-4aa6-b091-9ce5956ad69c",
            "start": "8b7f4c7d-1222-4e8a-a589-bdef7e3c3650",
            "end": "8435a6aa-e6db-4d22-b390-237b27713c49",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "352c2d06-dbfe-414b-abfa-97ee63ef51cc",
            "start": "ab38b01c-1a29-4cfe-9a9d-6ce28f392f9d",
            "end": "8b7f4c7d-1222-4e8a-a589-bdef7e3c3650",
            "properties": {
                "label": "contains"
            }
        },
        {
            "id": "d6caa9fc-6787-4304-97db-9dd9fd63e996",
            "start": "ab38b01c-1a29-4cfe-9a9d-6ce28f392f9d",
            "end": "237ac0bc-da84-419d-be98-7733eb47a302",
            "properties": {
                "label": "CONTAINS"
            }
        },
        {
            "id": "69e7787e-addf-4b6f-9d1f-4b30a7adf324",
            "start": "3a8f961d-fbe2-4fef-b46c-872f9cb513e6",
            "end": "f1d3aeee-f58f-47ae-a0ea-d8b762cf2c5e",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "5ccbe264-b737-4220-b175-9af4350387ef",
            "start": "3a8f961d-fbe2-4fef-b46c-872f9cb513e6",
            "end": "54f495f3-013f-4620-9adb-b08c0555de64",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "6fc32817-33c0-42d8-a664-5d11b69bee77",
            "start": "3a8f961d-fbe2-4fef-b46c-872f9cb513e6",
            "end": "6bda4a13-a21a-44ff-aceb-9b8382b83ed5",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "87a5843d-bd32-4e82-ae99-52abb72a9aec",
            "start": "3a8f961d-fbe2-4fef-b46c-872f9cb513e6",
            "end": "75cfefac-8659-4a9c-ba00-965650389663",
            "properties": {
                "label": "FUNCTION_DEFINITION"
            }
        },
        {
            "id": "4ef7b2b7-19bb-465a-ae1b-23b73e8a3bbe",
            "start": "ab38b01c-1a29-4cfe-9a9d-6ce28f392f9d",
            "end": "3a8f961d-fbe2-4fef-b46c-872f9cb513e6",
            "properties": {
                "label": "contains"
            }
        },
        {
            "id": "eb3e239b-29d0-4852-804e-c726bd8f9a47",
            "start": "e02dd498-544e-42f0-8a86-2ed23663b5fa",
            "end": "68d89add-fa64-4e5f-a6ba-aea29f009761",
            "properties": {
                "label": "IMPORTS"
            }
        },
        {
            "id": "05b6f6fd-8210-4c61-b2d7-17bae3f99182",
            "start": "e02dd498-544e-42f0-8a86-2ed23663b5fa",
            "end": "ba52d0de-166c-436e-943a-76f0bcf3b2e5",
            "properties": {
                "label": "IMPORTS"
            }
        },
        {
            "id": "437d4da9-bdf3-4192-b343-35deea2aef33",
            "start": "f719c326-709a-4bee-9f24-f8284092195c",
            "end": "8b7f4c7d-1222-4e8a-a589-bdef7e3c3650",
            "properties": {
                "label": "IMPORTS"
            }
        },
        {
            "id": "3a4b7f1d-4ff7-4e70-9680-8e2b8f734a52",
            "start": "f719c326-709a-4bee-9f24-f8284092195c",
            "end": "3a8f961d-fbe2-4fef-b46c-872f9cb513e6",
            "properties": {
                "label": "IMPORTS"
            }
        },
        {
            "id": "e352afdb-1796-45e9-8b3e-c36c1799970f",
            "start": "9b5cc1e6-2f86-49ef-a0c5-78cb617f6ed0",
            "end": "23324db8-91c1-43e4-b207-355f9d7cfa4b",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "5e7cd300-1bdc-4341-b094-ea8b3165f6e2",
            "start": "9b5cc1e6-2f86-49ef-a0c5-78cb617f6ed0",
            "end": "385a6c22-db5b-4ac1-a614-04266b55de69",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "d2da6f44-71c1-4e4e-acee-0c09102f1a95",
            "start": "9b5cc1e6-2f86-49ef-a0c5-78cb617f6ed0",
            "end": "385a6c22-db5b-4ac1-a614-04266b55de69",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "6fd9e5d2-f758-4f13-a61f-2991f01d58c8",
            "start": "23324db8-91c1-43e4-b207-355f9d7cfa4b",
            "end": "099479d1-d94f-422a-bc77-38f44ef757e2",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "4fcc311b-a379-46b2-8514-acb37ad80e89",
            "start": "48c3d5fe-774f-4763-b343-18ca1cb9728c",
            "end": "363cc239-ce19-47c3-8e50-a49c2eeb780d",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "b42324ef-9d42-4b8e-999c-8fee7a1de41e",
            "start": "363cc239-ce19-47c3-8e50-a49c2eeb780d",
            "end": "75cfefac-8659-4a9c-ba00-965650389663",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "48de8bf7-e913-41d1-a527-df7f9a87ec41",
            "start": "363cc239-ce19-47c3-8e50-a49c2eeb780d",
            "end": "807b7dee-bee8-46d6-88df-45bd822a5883",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "6b788460-60e8-4a9a-abc8-26c71748cd9a",
            "start": "363cc239-ce19-47c3-8e50-a49c2eeb780d",
            "end": "d6cb28e3-a74f-4a18-bbd9-60e2d941fd44",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "ad2e05fc-6b82-4634-a9d0-dfac366bbd74",
            "start": "363cc239-ce19-47c3-8e50-a49c2eeb780d",
            "end": "75cfefac-8659-4a9c-ba00-965650389663",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "66b4581a-4208-45bf-b0cc-59b7ea30ecdd",
            "start": "363cc239-ce19-47c3-8e50-a49c2eeb780d",
            "end": "a3343a53-68c1-4ff9-8a84-d04acb8f733d",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "4fb6ef17-fe93-4add-b5d9-48e007332f7c",
            "start": "eb22a818-affb-450c-98af-7c803037b409",
            "end": "33027659-04f2-4484-80de-fb9d3b2ac5cb",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "4864a522-179c-419a-9a76-09233d015293",
            "start": "eb22a818-affb-450c-98af-7c803037b409",
            "end": "12d3cf5b-b0bc-4208-8fbe-769373640232",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "23605eff-3932-4048-9f16-589e05163ff9",
            "start": "33027659-04f2-4484-80de-fb9d3b2ac5cb",
            "end": "75cfefac-8659-4a9c-ba00-965650389663",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "bb96f168-d48d-4840-8697-e06e00d16259",
            "start": "33027659-04f2-4484-80de-fb9d3b2ac5cb",
            "end": "807b7dee-bee8-46d6-88df-45bd822a5883",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "9d6edd91-97ab-46f8-941a-28f343f291cf",
            "start": "33027659-04f2-4484-80de-fb9d3b2ac5cb",
            "end": "d6cb28e3-a74f-4a18-bbd9-60e2d941fd44",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "8f5eb468-4766-4afc-a089-629e9387563f",
            "start": "33027659-04f2-4484-80de-fb9d3b2ac5cb",
            "end": "a3343a53-68c1-4ff9-8a84-d04acb8f733d",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "73f3b792-e695-4d29-a2a9-b43fc0eaede5",
            "start": "15a1603c-483a-4ac7-b151-9ea9b1e4490c",
            "end": "8435a6aa-e6db-4d22-b390-237b27713c49",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "f63c7b4e-6ad1-40de-a2a1-09b3176c0f36",
            "start": "15a1603c-483a-4ac7-b151-9ea9b1e4490c",
            "end": "eb22a818-affb-450c-98af-7c803037b409",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "074c2bd0-5600-424a-b589-0f0d5e771723",
            "start": "15a1603c-483a-4ac7-b151-9ea9b1e4490c",
            "end": "15a1603c-483a-4ac7-b151-9ea9b1e4490c",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "6f3a7715-af1c-4c75-8caf-51c8ff54aea6",
            "start": "7d94e52d-1973-45d1-9565-62e5f972f645",
            "end": "15a1603c-483a-4ac7-b151-9ea9b1e4490c",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "3a6d0c9d-33e5-4a63-9340-e3ae65231bb3",
            "start": "7d94e52d-1973-45d1-9565-62e5f972f645",
            "end": "1c587f0d-26e1-45eb-986d-4a0dd84d5741",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "a9187ca3-44cd-4f5c-a2ef-69e2dc78582c",
            "start": "7d94e52d-1973-45d1-9565-62e5f972f645",
            "end": "9207bd9b-9723-4f47-9184-ee911ed7b93b",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "124abd60-2467-4b33-94d6-f70043347995",
            "start": "6bda4a13-a21a-44ff-aceb-9b8382b83ed5",
            "end": "54f495f3-013f-4620-9adb-b08c0555de64",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "a54df8f4-16ce-4549-93c6-bf2e522c9650",
            "start": "75cfefac-8659-4a9c-ba00-965650389663",
            "end": "f1d3aeee-f58f-47ae-a0ea-d8b762cf2c5e",
            "properties": {
                "label": "CALLS"
            }
        },
        {
            "id": "d9282df2-eddf-407b-9090-7b42a3ec43ca",
            "start": "75cfefac-8659-4a9c-ba00-965650389663",
            "end": "6bda4a13-a21a-44ff-aceb-9b8382b83ed5",
            "properties": {
                "label": "CALLS"
            }
        }
    ]
}